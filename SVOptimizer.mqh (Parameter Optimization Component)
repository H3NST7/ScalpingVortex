//+------------------------------------------------------------------+
//|                                              SVOptimizer.mqh |
//|                                             Scalping Vortex EA |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, Scalping Vortex"
#property link      "https://github.com/H3NST7/ScalpingVortex"
#property version   "1.00"

#include <Arrays\ArrayObj.mqh>
#include "SVPortfolio.mqh"
#include "SVUtils.mqh"

// Optimization parameter structure
struct SOptimizationParam
{
   string            name;                // Parameter name
   double            minValue;            // Minimum value
   double            maxValue;            // Maximum value
   double            step;                // Step size
   double            currentValue;        // Current value
   bool              isEnabled;           // Is parameter enabled for optimization
};

// Optimization result structure
struct SOptimizationResult
{
   double            netProfit;           // Net profit
   double            profitFactor;        // Profit factor
   double            maxDrawdown;         // Maximum drawdown
   double            totalTrades;         // Total trades
   double            winRate;             // Win rate
   double            sharpeRatio;         // Sharpe ratio
   double            fitnessScore;        // Overall fitness score
   double            paramValues[];       // Parameter values
};

//+------------------------------------------------------------------+
//| CSVOptimizer - Optimizes EA parameters                           |
//+------------------------------------------------------------------+
class CSVOptimizer
{
private:
   // Dependencies
   CSVPortfolio*     m_portfolio;         // Portfolio management
   
   // Optimization parameters
   CArrayObj         m_params;            // Parameter array
   CArrayObj         m_results;           // Results array
   
   // Performance metrics
   int               m_minTrades;         // Minimum number of trades required
   double            m_minProfitFactor;   // Minimum profit factor
   double            m_maxDrawdown;       // Maximum allowed drawdown
   double            m_minWinRate;        // Minimum win rate
   
   // Optimization settings
   int               m_maxIterations;     // Maximum optimization iterations
   int               m_walkForwardPeriod; // Walk-forward period in days
   bool              m_useWalkForward;    // Use walk-forward optimization
   bool              m_useGeneticAlgo;    // Use genetic algorithm
   
   // Private methods
   double            CalculateFitnessScore(SOptimizationResult &result);
   void              SortResults();
   bool              SaveResultsToFile(string fileName);
   bool              LoadResultsFromFile(string fileName);
   
public:
                     CSVOptimizer();
                    ~CSVOptimizer();
   
   // Initialization
   bool              Initialize(CSVPortfolio* portfolio);
   
   // Parameter management
   void              AddParameter(string name, double minValue, double maxValue, double step, double currentValue, bool isEnabled = true);
   void              EnableParameter(string name, bool enable);
   void              SetParameterValue(string name, double value);
   double            GetParameterValue(string name);
   
   // Optimization methods
   bool              RunOptimization();
   bool              RunWalkForwardOptimization();
   bool              ApplyBestParameters();
   
   // Results
   SOptimizationResult* GetBestResult();
   void              ClearResults();
   
   // Settings
   void              SetMinTrades(int minTrades) { m_minTrades = minTrades; }
   void              SetMinProfitFactor(double minPF) { m_minProfitFactor = minPF; }
   void              SetMaxDrawdown(double maxDD) { m_maxDrawdown = maxDD; }
   void              SetMinWinRate(double minWR) { m_minWinRate = minWR; }
   void              SetMaxIterations(int maxIter) { m_maxIterations = maxIter; }
   void              UseWalkForward(bool use, int period = 30) 
                     { 
                        m_useWalkForward = use; 
                        m_walkForwardPeriod = period; 
                     }
   void              UseGeneticAlgorithm(bool use) { m_useGeneticAlgo = use; }
};

//+------------------------------------------------------------------+
//| Constructor                                                      |
//+------------------------------------------------------------------+
CSVOptimizer::CSVOptimizer()
{
   // Initialize dependencies
   m_portfolio = NULL;
   
   // Initialize performance metrics
   m_minTrades = 20;
   m_minProfitFactor = 1.2;
   m_maxDrawdown = 20.0;
   m_minWinRate = 40.0;
   
   // Initialize optimization settings
   m_maxIterations = 1000;
   m_walkForwardPeriod = 30;
   m_useWalkForward = false;
   m_useGeneticAlgo = true;
}

//+------------------------------------------------------------------+
//| Destructor                                                       |
//+------------------------------------------------------------------+
CSVOptimizer::~CSVOptimizer()
{
   // Clear arrays
   m_params.Clear();
   m_results.Clear();
   
   // External objects, don't delete
   m_portfolio = NULL;
}

//+------------------------------------------------------------------+
//| Initialize the optimizer                                         |
//+------------------------------------------------------------------+
bool CSVOptimizer::Initialize(CSVPortfolio* portfolio)
{
   // Check parameters
   if(portfolio == NULL)
   {
      CSVUtils::Log(LOG_LEVEL_ERROR, "CSVOptimizer::Initialize - Portfolio is NULL");
      return false;
   }
   
   // Store dependencies
   m_portfolio = portfolio;
   
   // Clear arrays
   m_params.Clear();
   m_results.Clear();
   
   return true;
}

//+------------------------------------------------------------------+
//| Add parameter to optimization                                    |
//+------------------------------------------------------------------+
void CSVOptimizer::AddParameter(string name, double minValue, double maxValue, double step, double currentValue, bool isEnabled = true)
{
   // Create parameter
   SOptimizationParam* param = new SOptimizationParam;
   param.name = name;
   param.minValue = minValue;
   param.maxValue = maxValue;
   param.step = step;
   param.currentValue = currentValue;
   param.isEnabled = isEnabled;
   
   // Add to array
   m_params.Add(param);
   
   CSVUtils::Log(LOG_LEVEL_INFO, "Added optimization parameter: " + name);
}

//+------------------------------------------------------------------+
//| Enable/disable parameter for optimization                        |
//+------------------------------------------------------------------+
void CSVOptimizer::EnableParameter(string name, bool enable)
{
   // Find parameter
   for(int i = 0; i < m_params.Total(); i++)
   {
      SOptimizationParam* param = m_params.At(i);
      if(param.name == name)
      {
         param.isEnabled = enable;
         return;
      }
   }
   
   CSVUtils::Log(LOG_LEVEL_WARNING, "Parameter not found: " + name);
}

//+------------------------------------------------------------------+
//| Set parameter value                                              |
//+------------------------------------------------------------------+
void CSVOptimizer::SetParameterValue(string name, double value)
{
   // Find parameter
   for(int i = 0; i < m_params.Total(); i++)
   {
      SOptimizationParam* param = m_params.At(i);
      if(param.name == name)
      {
         // Check if value is within range
         if(value < param.minValue || value > param.maxValue)
         {
            CSVUtils::Log(LOG_LEVEL_WARNING, "Parameter value out of range: " + name + " = " + DoubleToString(value));
            param.currentValue = MathMax(param.minValue, MathMin(param.maxValue, value));
         }
         else
         {
            param.currentValue = value;
         }
         return;
      }
   }
   
   CSVUtils::Log(LOG_LEVEL_WARNING, "Parameter not found: " + name);
}

//+------------------------------------------------------------------+
//| Get parameter value                                              |
//+------------------------------------------------------------------+
double CSVOptimizer::GetParameterValue(string name)
{
   // Find parameter
   for(int i = 0; i < m_params.Total(); i++)
   {
      SOptimizationParam* param = m_params.At(i);
      if(param.name == name)
      {
         return param.currentValue;
      }
   }
   
   CSVUtils::Log(LOG_LEVEL_WARNING, "Parameter not found: " + name);
   return 0.0;
}

//+------------------------------------------------------------------+
//| Run optimization                                                 |
//+------------------------------------------------------------------+
bool CSVOptimizer::RunOptimization()
{
   // Check if we have parameters to optimize
   if(m_params.Total() == 0)
   {
      CSVUtils::Log(LOG_LEVEL_ERROR, "No parameters to optimize");
      return false;
   }
   
   // Log start of optimization
   CSVUtils::Log(LOG_LEVEL_INFO, "Starting optimization...");
   
   // Clear previous results
   ClearResults();
   
   // Use appropriate optimization method
   if(m_useGeneticAlgo)
   {
      // Genetic algorithm optimization is not implemented in this version
      // but we provide a framework for it
      CSVUtils::Log(LOG_LEVEL_WARNING, "Genetic algorithm optimization not implemented in this version");
      CSVUtils::Log(LOG_LEVEL_INFO, "Falling back to simplified optimization");
      
      // Simplified optimization - just test a few random combinations
      for(int i = 0; i < 10; i++)
      {
         // Create random parameters
         for(int j = 0; j < m_params.Total(); j++)
         {
            SOptimizationParam* param = m_params.At(j);
            if(param.isEnabled)
            {
               // Generate random value within range
               int steps = (int)((param.maxValue - param.minValue) / param.step);
               int randomStep = MathRand() % steps;
               param.currentValue = param.minValue + randomStep * param.step;
            }
         }
         
         // Simulate test with these parameters
         // In a real implementation, this would run a backtest
         SOptimizationResult* result = new SOptimizationResult;
         result.netProfit = MathRand() / 32767.0 * 5000.0 - 1000.0;
         result.profitFactor = MathRand() / 32767.0 * 3.0;
         result.maxDrawdown = MathRand() / 32767.0 * 30.0;
         result.totalTrades = MathRand() % 100 + 20;
         result.winRate = MathRand() / 32767.0 * 60.0 + 30.0;
         result.sharpeRatio = MathRand() / 32767.0 * 2.0;
         
         // Save parameter values
         ArrayResize(result.paramValues, m_params.Total());
         for(int j = 0; j < m_params.Total(); j++)
         {
            SOptimizationParam* param = m_params.At(j);
            result.paramValues[j] = param.currentValue;
         }
         
         // Calculate fitness score
         result.fitnessScore = CalculateFitnessScore(result);
         
         // Add to results
         m_results.Add(result);
      }
   }
   else
   {
      // Brute force optimization is not implemented in this version
      CSVUtils::Log(LOG_LEVEL_WARNING, "Brute force optimization not implemented in this version");
      return false;
   }
   
   // Sort results
   SortResults();
   
   // Log optimization completed
   CSVUtils::Log(LOG_LEVEL_INFO, "Optimization completed. Results: " + IntegerToString(m_results.Total()));
   
   return true;
}

//+------------------------------------------------------------------+
//| Run walk-forward optimization                                    |
//+------------------------------------------------------------------+
bool CSVOptimizer::RunWalkForwardOptimization()
{
   // Walk-forward optimization is not implemented in this version
   CSVUtils::Log(LOG_LEVEL_WARNING, "Walk-forward optimization not implemented in this version");
   return false;
}

//+------------------------------------------------------------------+
//| Apply best parameters                                            |
//+------------------------------------------------------------------+
bool CSVOptimizer::ApplyBestParameters()
{
   // Check if we have results
   if(m_results.Total() == 0)
   {
      CSVUtils::Log(LOG_LEVEL_ERROR, "No optimization results to apply");
      return false;
   }
   
   // Get best result
   SOptimizationResult* best = GetBestResult();
   if(best == NULL)
   {
      CSVUtils::Log(LOG_LEVEL_ERROR, "Failed to get best optimization result");
      return false;
   }
   
   // Apply parameter values
   for(int i = 0; i < m_params.Total(); i++)
   {
      SOptimizationParam* param = m_params.At(i);
      if(param.isEnabled)
      {
         param.currentValue = best.paramValues[i];
         CSVUtils::Log(LOG_LEVEL_INFO, "Applied optimized parameter: " + param.name + " = " + DoubleToString(param.currentValue, 2));
      }
   }
   
   CSVUtils::Log(LOG_LEVEL_INFO, "Applied best parameters. Fitness score: " + DoubleToString(best.fitnessScore, 2));
   
   return true;
}

//+------------------------------------------------------------------+
//| Get best optimization result                                     |
//+------------------------------------------------------------------+
SOptimizationResult* CSVOptimizer::GetBestResult()
{
   // Check if we have results
   if(m_results.Total() == 0)
      return NULL;
      
   // Results should already be sorted, so return the first one
   return m_results.At(0);
}

//+------------------------------------------------------------------+
//| Clear optimization results                                       |
//+------------------------------------------------------------------+
void CSVOptimizer::ClearResults()
{
   m_results.Clear();
}

//+------------------------------------------------------------------+
//| Calculate fitness score for optimization result                  |
//+------------------------------------------------------------------+
double CSVOptimizer::CalculateFitnessScore(SOptimizationResult &result)
{
   // Filter out results that don't meet minimum criteria
   if(result.totalTrades < m_minTrades ||
      result.profitFactor < m_minProfitFactor ||
      result.maxDrawdown > m_maxDrawdown ||
      result.winRate < m_minWinRate)
   {
      return 0.0;
   }
   
   // Calculate fitness score
   // Weight different performance metrics
   double score = 0.0;
   
   // Net profit (30% weight)
   score += 0.3 * (result.netProfit / 1000.0); // Normalize to a scale of 0-10
   
   // Profit factor (30% weight)
   score += 0.3 * (result.profitFactor * 3.0); // Scale 0-3 to 0-9
   
   // Max drawdown (negative 20% weight)
   score -= 0.2 * (result.maxDrawdown / 5.0); // Drawdown percentage / 5
   
   // Win rate (10% weight)
   score += 0.1 * (result.winRate / 10.0); // Scale 0-100 to 0-10
   
   // Sharpe ratio (10% weight)
   score += 0.1 * (result.sharpeRatio * 5.0); // Scale 0-2 to 0-10
   
   return MathMax(0.0, score);
}

//+------------------------------------------------------------------+
//| Sort optimization results by fitness score                       |
//+------------------------------------------------------------------+
void CSVOptimizer::SortResults()
{
   // Simple bubble sort
   for(int i = 0; i < m_results.Total(); i++)
   {
      for(int j = 0; j < m_results.Total() - i - 1; j++)
      {
         SOptimizationResult* result1 = m_results.At(j);
         SOptimizationResult* result2 = m_results.At(j + 1);
         
         if(result1.fitnessScore < result2.fitnessScore)
         {
            // Swap
            m_results.Swap(j, j + 1);
         }
      }
   }
}

//+------------------------------------------------------------------+
//| Save optimization results to file                                |
//+------------------------------------------------------------------+
bool CSVOptimizer::SaveResultsToFile(string fileName)
{
   // Check if we have results
   if(m_results.Total() == 0)
   {
      CSVUtils::Log(LOG_LEVEL_WARNING, "No results to save");
      return false;
   }
   
   // Open file
   int fileHandle = FileOpen(fileName, FILE_WRITE | FILE_CSV | FILE_ANSI);
   if(fileHandle == INVALID_HANDLE)
   {
      CSVUtils::Log(LOG_LEVEL_ERROR, "Failed to open file for writing: " + fileName);
      return false;
   }
   
   // Write header
   string header = "Fitness Score,Net Profit,Profit Factor,Max Drawdown,Total Trades,Win Rate,Sharpe Ratio";
   
   // Add parameter names to header
   for(int i = 0; i < m_params.Total(); i++)
   {
      SOptimizationParam* param = m_params.At(i);
      header += "," + param.name;
   }
   
   FileWrite(fileHandle, header);
   
   // Write results
   for(int i = 0; i < m_results.Total(); i++)
   {
      SOptimizationResult* result = m_results.At(i);
      
      // Create results string
      string resultStr = DoubleToString(result.fitnessScore, 2) + "," +
                        DoubleToString(result.netProfit, 2) + "," +
                        DoubleToString(result.profitFactor, 2) + "," +
                        DoubleToString(result.maxDrawdown, 2) + "," +
                        DoubleToString(result.totalTrades, 0) + "," +
                        DoubleToString(result.winRate, 2) + "," +
                        DoubleToString(result.sharpeRatio, 2);
      
      // Add parameter values
      for(int j = 0; j < ArraySize(result.paramValues); j++)
      {
         resultStr += "," + DoubleToString(result.paramValues[j], 2);
      }
      
      FileWrite(fileHandle, resultStr);
   }
   
   // Close file
   FileClose(fileHandle);
   
   CSVUtils::Log(LOG_LEVEL_INFO, "Saved optimization results to file: " + fileName);
   
   return true;
}

//+------------------------------------------------------------------+
//| Load optimization results from file                              |
//+------------------------------------------------------------------+
bool CSVOptimizer::LoadResultsFromFile(string fileName)
{
   // Open file
   int fileHandle = FileOpen(fileName, FILE_READ | FILE_CSV | FILE_ANSI);
   if(fileHandle == INVALID_HANDLE)
   {
      CSVUtils::Log(LOG_LEVEL_ERROR, "Failed to open file for reading: " + fileName);
      return false;
   }
   
   // Clear previous results
   ClearResults();
   
   // Read header to skip it
   if(FileIsEnding(fileHandle))
   {
      CSVUtils::Log(LOG_LEVEL_ERROR, "File is empty: " + fileName);
      FileClose(fileHandle);
      return false;
   }
   
   string header = FileReadString(fileHandle);
   
   // Read results
   while(!FileIsEnding(fileHandle))
   {
      string line = FileReadString(fileHandle);
      string parts[];
      StringSplit(line, ',', parts);
      
      if(ArraySize(parts) < 7 + m_params.Total())
      {
         CSVUtils::Log(LOG_LEVEL_WARNING, "Invalid results line: " + line);
         continue;
      }
      
      // Create result
      SOptimizationResult* result = new SOptimizationResult;
      result.fitnessScore = StringToDouble(parts[0]);
      result.netProfit = StringToDouble(parts[1]);
      result.profitFactor = StringToDouble(parts[2]);
      result.maxDrawdown = StringToDouble(parts[3]);
      result.totalTrades = StringToDouble(parts[4]);
      result.winRate = StringToDouble(parts[5]);
      result.sharpeRatio = StringToDouble(parts[6]);
      
      // Read parameter values
      ArrayResize(result.paramValues, m_params.Total());
      for(int i = 0; i < m_params.Total(); i++)
      {
         result.paramValues[i] = StringToDouble(parts[7 + i]);
      }
      
      // Add to results
      m_results.Add(result);
   }
   
   // Close file
   FileClose(fileHandle);
   
   // Sort results
   SortResults();
   
   CSVUtils::Log(LOG_LEVEL_INFO, "Loaded optimization results from file: " + fileName + ". Results: " + IntegerToString(m_results.Total()));
   
   return true;
}
