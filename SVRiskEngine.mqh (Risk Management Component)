//+------------------------------------------------------------------+
//|                                             SVRiskEngine.mqh |
//|                                             Scalping Vortex EA |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, Scalping Vortex"
#property link      "https://github.com/H3NST7/ScalpingVortex"
#property version   "1.00"

#include <Trade\SymbolInfo.mqh>
#include "SVPortfolio.mqh"
#include "SVMarketAnalyzer.mqh"
#include "SVUtils.mqh"

//+------------------------------------------------------------------+
//| CSVRiskEngine - Handles risk management and position sizing      |
//+------------------------------------------------------------------+
class CSVRiskEngine
{
private:
   // Dependencies
   CSVPortfolio*     m_portfolio;         // Portfolio management
   CSVMarketAnalyzer* m_analyzer;         // Market analyzer
   CSymbolInfo       m_symbolInfo;        // Symbol information
   
   // Risk parameters
   string            m_symbol;            // Trading symbol
   double            m_riskPercent;       // Risk percentage per trade
   double            m_maxEquityRisk;     // Maximum equity at risk at any time
   double            m_minRewardRatio;    // Minimum reward-to-risk ratio
   double            m_maxPositionSize;   // Maximum position size in lots
   
   // Position sizing methods
   bool              m_useFixedLots;      // Use fixed lot size
   double            m_fixedLotSize;      // Fixed lot size
   bool              m_useRiskBasedLots;  // Use risk-based position sizing
   bool              m_useATRStops;       // Use ATR-based stop loss
   double            m_atrMultiplier;     // ATR multiplier for stop loss
   
   // Risk controls
   bool              m_useEquityProtection; // Use equity protection
   double            m_equityProtectionLevel; // Equity protection level in percentage
   bool              m_useDailyLossLimit;    // Use daily loss limit
   double            m_dailyLossLimit;       // Daily loss limit in percentage
   
   // Private methods
   double            CalculateRiskBasedLotSize(double entryPrice, double stopLoss);
   double            CalculateFixedRiskLotSize(double riskAmount, double entryPrice, double stopLoss);
   double            CalculateATRStopLoss(double entryPrice, int direction);
   double            PriceToPips(double price1, double price2);
   double            PipsToPrice(double pips);
   double            NormalizeLotSize(double lotSize);
   
public:
                     CSVRiskEngine();
                    ~CSVRiskEngine();
   
   // Initialization
   bool              Initialize(string symbol, CSVPortfolio* portfolio, CSVMarketAnalyzer* analyzer);
   
   // Position sizing
   double            GetPositionSize(double entryPrice, double stopLoss);
   double            GetStopLossPrice(double entryPrice, int direction);
   double            GetTakeProfitPrice(double entryPrice, double stopLoss, int direction);
   
   // Risk assessment
   bool              IsTradeRiskAcceptable(double entryPrice, double stopLoss, double lotSize);
   bool              IsRiskRewardAcceptable(double entryPrice, double stopLoss, double takeProfit, int direction);
   bool              IsEquityRiskAcceptable();
   bool              IsDailyLossAcceptable();
   
   // Risk calculation
   double            CalculateTradeRisk(double entryPrice, double stopLoss, double lotSize);
   double            CalculateRiskRewardRatio(double entryPrice, double stopLoss, double takeProfit, int direction);
   double            CalculateTotalEquityRisk();
   double            CalculateProfitInPips(double entryPrice, double exitPrice, int direction);
   double            CalculateProfitInMoney(double entryPrice, double exitPrice, double lotSize, int direction);
   
   // Setters
   void              SetRiskPercent(double riskPercent) { m_riskPercent = riskPercent; }
   void              SetMaxEquityRisk(double maxRisk) { m_maxEquityRisk = maxRisk; }
   void              SetMinRewardRatio(double minRatio) { m_minRewardRatio = minRatio; }
   void              SetMaxPositionSize(double maxSize) { m_maxPositionSize = maxSize; }
   void              SetFixedLotSize(double lotSize) { m_fixedLotSize = lotSize; }
   void              UseFixedLots(bool useFixed) { m_useFixedLots = useFixed; }
   void              UseRiskBasedLots(bool useRiskBased) { m_useRiskBasedLots = useRiskBased; }
   void              UseATRStops(bool useATR, double atrMultiplier = 2.0) 
                     { 
                        m_useATRStops = useATR; 
                        m_atrMultiplier = atrMultiplier; 
                     }
   void              UseEquityProtection(bool useProtection, double level = 90.0) 
                     { 
                        m_useEquityProtection = useProtection; 
                        m_equityProtectionLevel = level; 
                     }
   void              UseDailyLossLimit(bool useLimit, double limit = 5.0) 
                     { 
                        m_useDailyLossLimit = useLimit; 
                        m_dailyLossLimit = limit; 
                     }
};

//+------------------------------------------------------------------+
//| Constructor                                                      |
//+------------------------------------------------------------------+
CSVRiskEngine::CSVRiskEngine()
{
   // Initialize dependencies
   m_portfolio = NULL;
   m_analyzer = NULL;
   
   // Initialize risk parameters
   m_symbol = Symbol();
   m_riskPercent = 2.0;           // 2% risk per trade
   m_maxEquityRisk = 10.0;        // 10% maximum equity at risk
   m_minRewardRatio = 1.5;        // 1.5:1 minimum reward-to-risk ratio
   m_maxPositionSize = 10.0;      // 10 lots maximum position size
   
   // Initialize position sizing methods
   m_useFixedLots = false;
   m_fixedLotSize = 0.01;
   m_useRiskBasedLots = true;
   m_useATRStops = true;
   m_atrMultiplier = 2.0;
   
   // Initialize risk controls
   m_useEquityProtection = true;
   m_equityProtectionLevel = 90.0;
   m_useDailyLossLimit = true;
   m_dailyLossLimit = 5.0;
}

//+------------------------------------------------------------------+
//| Destructor                                                       |
//+------------------------------------------------------------------+
CSVRiskEngine::~CSVRiskEngine()
{
   // External objects, don't delete
   m_portfolio = NULL;
   m_analyzer = NULL;
}

//+------------------------------------------------------------------+
//| Initialize the risk engine                                       |
//+------------------------------------------------------------------+
bool CSVRiskEngine::Initialize(string symbol, CSVPortfolio* portfolio, CSVMarketAnalyzer* analyzer)
{
   // Check parameters
   if(portfolio == NULL || analyzer == NULL)
   {
      Print("CSVRiskEngine::Initialize - Portfolio or analyzer is NULL");
      return false;
   }
   
   // Store dependencies
   m_portfolio = portfolio;
   m_analyzer = analyzer;
   m_symbol = symbol;
   
   // Initialize symbol info
   if(!m_symbolInfo.Name(symbol))
   {
      Print("CSVRiskEngine::Initialize - Failed to set symbol name: ", symbol);
      return false;
   }
   
   // Refresh symbol rates
   if(!m_symbolInfo.RefreshRates())
   {
      Print("CSVRiskEngine::Initialize - Failed to refresh rates for symbol: ", symbol);
      return false;
   }
   
   return true;
}

//+------------------------------------------------------------------+
//| Get position size based on risk parameters                       |
//+------------------------------------------------------------------+
double CSVRiskEngine::GetPositionSize(double entryPrice, double stopLoss)
{
   double lotSize = 0.0;
   
   // If fixed lot size is enabled, use it
   if(m_useFixedLots)
   {
      lotSize = m_fixedLotSize;
   }
   // If risk-based position sizing is enabled, calculate lot size
   else if(m_useRiskBasedLots)
   {
      lotSize = CalculateRiskBasedLotSize(entryPrice, stopLoss);
   }
   
   // Apply maximum position size limit
   lotSize = MathMin(lotSize, m_maxPositionSize);
   
   // Normalize lot size
   return NormalizeLotSize(lotSize);
}

//+------------------------------------------------------------------+
//| Get stop loss price based on risk parameters                     |
//+------------------------------------------------------------------+
double CSVRiskEngine::GetStopLossPrice(double entryPrice, int direction)
{
   // If ATR-based stop loss is enabled, calculate it
   if(m_useATRStops && m_analyzer != NULL)
   {
      return CalculateATRStopLoss(entryPrice, direction);
   }
   
   // Default stop loss - 20 pips
   double stopDistance = 20.0 * m_symbolInfo.Point() * 10;
   
   if(direction > 0) // Long position
   {
      return entryPrice - stopDistance;
   }
   else // Short position
   {
      return entryPrice + stopDistance;
   }
}

//+------------------------------------------------------------------+
//| Get take profit price based on risk parameters                   |
//+------------------------------------------------------------------+
double CSVRiskEngine::GetTakeProfitPrice(double entryPrice, double stopLoss, int direction)
{
   // Calculate stop loss distance
   double stopDistance = MathAbs(entryPrice - stopLoss);
   
   // Calculate take profit distance based on minimum reward ratio
   double tpDistance = stopDistance * m_minRewardRatio;
   
   if(direction > 0) // Long position
   {
      return entryPrice + tpDistance;
   }
   else // Short position
   {
      return entryPrice - tpDistance;
   }
}

//+------------------------------------------------------------------+
//| Check if trade risk is acceptable                                |
//+------------------------------------------------------------------+
bool CSVRiskEngine::IsTradeRiskAcceptable(double entryPrice, double stopLoss, double lotSize)
{
   // Calculate trade risk in money
   double riskMoney = CalculateTradeRisk(entryPrice, stopLoss, lotSize);
   
   // Calculate account equity
   double equity = m_portfolio != NULL ? m_portfolio.GetAccountEquity() : AccountInfoDouble(ACCOUNT_EQUITY);
   
   // Calculate risk percentage
   double riskPercent = riskMoney / equity * 100.0;
   
   // Check if risk is acceptable
   return (riskPercent <= m_riskPercent);
}

//+------------------------------------------------------------------+
//| Check if risk/reward ratio is acceptable                         |
//+------------------------------------------------------------------+
bool CSVRiskEngine::IsRiskRewardAcceptable(double entryPrice, double stopLoss, double takeProfit, int direction)
{
   // Calculate risk/reward ratio
   double rrRatio = CalculateRiskRewardRatio(entryPrice, stopLoss, takeProfit, direction);
   
   // Check if ratio is acceptable
   return (rrRatio >= m_minRewardRatio);
}

//+------------------------------------------------------------------+
//| Check if total equity risk is acceptable                         |
//+------------------------------------------------------------------+
bool CSVRiskEngine::IsEquityRiskAcceptable()
{
   // Check if equity protection is enabled
   if(!m_useEquityProtection)
      return true;
      
   // Calculate total equity risk
   double totalRisk = CalculateTotalEquityRisk();
   
   // Check if total risk is acceptable
   return (totalRisk <= m_maxEquityRisk);
}

//+------------------------------------------------------------------+
//| Check if daily loss is acceptable                                |
//+------------------------------------------------------------------+
bool CSVRiskEngine::IsDailyLossAcceptable()
{
   // Check if daily loss limit is enabled
   if(!m_useDailyLossLimit || m_portfolio == NULL)
      return true;
      
   // Get daily loss percentage
   double dailyLoss = m_portfolio.GetDailyLoss();
   double equity = m_portfolio.GetAccountEquity();
   double dailyLossPercent = dailyLoss / equity * 100.0;
   
   // Check if daily loss is acceptable
   return (dailyLossPercent <= m_dailyLossLimit);
}

//+------------------------------------------------------------------+
//| Calculate trade risk in money                                    |
//+------------------------------------------------------------------+
double CSVRiskEngine::CalculateTradeRisk(double entryPrice, double stopLoss, double lotSize)
{
   // Calculate stop loss distance in points
   double stopDistance = PriceToPips(entryPrice, stopLoss);
   
   // Get tick value
   double tickValue = m_symbolInfo.TickValue();
   
   // Calculate risk in money
   return stopDistance * tickValue * lotSize;
}

//+------------------------------------------------------------------+
//| Calculate risk/reward ratio                                      |
//+------------------------------------------------------------------+
double CSVRiskEngine::CalculateRiskRewardRatio(double entryPrice, double stopLoss, double takeProfit, int direction)
{
   // Check if parameters are valid
   if(stopLoss <= 0.0 || takeProfit <= 0.0)
      return 0.0;
      
   // Calculate stop loss and take profit distances
   double stopDistance = MathAbs(entryPrice - stopLoss);
   double tpDistance = MathAbs(entryPrice - takeProfit);
   
   // Calculate reward/risk ratio
   return direction > 0 ? tpDistance / stopDistance : tpDistance / stopDistance;
}

//+------------------------------------------------------------------+
//| Calculate total equity at risk                                   |
//+------------------------------------------------------------------+
double CSVRiskEngine::CalculateTotalEquityRisk()
{
   double totalRisk = 0.0;
   
   // Check if portfolio is available
   if(m_portfolio == NULL)
      return 0.0;
      
   // Get account equity
   double equity = m_portfolio.GetAccountEquity();
   
   // Loop through all open positions
   for(int i = 0; i < PositionsTotal(); i++)
   {
      // Get position ticket
      ulong ticket = PositionGetTicket(i);
      if(ticket == 0)
         continue;
         
      // Check if position belongs to our symbol
      if(PositionGetString(POSITION_SYMBOL) != m_symbol)
         continue;
         
      // Get position details
      double openPrice = PositionGetDouble(POSITION_PRICE_OPEN);
      double stopLoss = PositionGetDouble(POSITION_SL);
      double volume = PositionGetDouble(POSITION_VOLUME);
      
      // Skip positions without stop loss
      if(stopLoss <= 0.0)
         continue;
         
      // Calculate position risk
      double riskMoney = CalculateTradeRisk(openPrice, stopLoss, volume);
      double riskPercent = riskMoney / equity * 100.0;
      
      // Add to total risk
      totalRisk += riskPercent;
   }
   
   return totalRisk;
}

//+------------------------------------------------------------------+
//| Calculate profit in pips                                         |
//+------------------------------------------------------------------+
double CSVRiskEngine::CalculateProfitInPips(double entryPrice, double exitPrice, int direction)
{
   double pips = 0.0;
   
   if(direction > 0) // Long position
   {
      pips = PriceToPips(exitPrice, entryPrice);
   }
   else // Short position
   {
      pips = PriceToPips(entryPrice, exitPrice);
   }
   
   return pips;
}

//+------------------------------------------------------------------+
//| Calculate profit in money                                        |
//+------------------------------------------------------------------+
double CSVRiskEngine::CalculateProfitInMoney(double entryPrice, double exitPrice, double lotSize, int direction)
{
   // Calculate profit in pips
   double pips = CalculateProfitInPips(entryPrice, exitPrice, direction);
   
   // Get tick value
   double tickValue = m_symbolInfo.TickValue();
   
   // Calculate profit in money
   return pips * tickValue * lotSize;
}

//+------------------------------------------------------------------+
//| Calculate risk-based lot size                                    |
//+------------------------------------------------------------------+
double CSVRiskEngine::CalculateRiskBasedLotSize(double entryPrice, double stopLoss)
{
   // Check if parameters are valid
   if(stopLoss <= 0.0 || entryPrice <= 0.0)
      return m_fixedLotSize;
      
   // Get account equity
   double equity = m_portfolio != NULL ? m_portfolio.GetAccountEquity() : AccountInfoDouble(ACCOUNT_EQUITY);
   
   // Calculate risk amount in money
   double riskAmount = equity * m_riskPercent / 100.0;
   
   // Calculate lot size based on risk amount
   return CalculateFixedRiskLotSize(riskAmount, entryPrice, stopLoss);
}

//+------------------------------------------------------------------+
//| Calculate lot size for fixed risk amount                         |
//+------------------------------------------------------------------+
double CSVRiskEngine::CalculateFixedRiskLotSize(double riskAmount, double entryPrice, double stopLoss)
{
   // Calculate stop loss distance in points
   double stopDistance = PriceToPips(entryPrice, stopLoss);
   
   // Check if stop distance is valid
   if(stopDistance <= 0.0)
      return m_fixedLotSize;
      
   // Get tick value
   double tickValue = m_symbolInfo.TickValue();
   
   // Calculate lot size
   return riskAmount / (stopDistance * tickValue);
}

//+------------------------------------------------------------------+
//| Calculate ATR-based stop loss                                    |
//+------------------------------------------------------------------+
double CSVRiskEngine::CalculateATRStopLoss(double entryPrice, int direction)
{
   // Check if analyzer is available
   if(m_analyzer == NULL)
      return 0.0;
      
   // Get current ATR value
   double atr = m_analyzer.GetAverageTrueRange();
   
   // Calculate stop loss distance
   double stopDistance = atr * m_atrMultiplier;
   
   if(direction > 0) // Long position
   {
      return entryPrice - stopDistance;
   }
   else // Short position
   {
      return entryPrice + stopDistance;
   }
}

//+------------------------------------------------------------------+
//| Convert price difference to pips                                 |
//+------------------------------------------------------------------+
double CSVRiskEngine::PriceToPips(double price1, double price2)
{
   return MathAbs(price1 - price2) / m_symbolInfo.Point();
}

//+------------------------------------------------------------------+
//| Convert pips to price difference                                 |
//+------------------------------------------------------------------+
double CSVRiskEngine::PipsToPrice(double pips)
{
   return pips * m_symbolInfo.Point();
}

//+------------------------------------------------------------------+
//| Normalize lot size according to symbol settings                  |
//+------------------------------------------------------------------+
double CSVRiskEngine::NormalizeLotSize(double lotSize)
{
   // Get lot size constraints
   double minVolume = m_symbolInfo.LotsMin();
   double maxVolume = m_symbolInfo.LotsMax();
   double stepVolume = m_symbolInfo.LotsStep();
   
   // Normalize volume
   lotSize = MathMax(minVolume, lotSize);
   lotSize = MathMin(maxVolume, lotSize);
   lotSize = MathRound(lotSize / stepVolume) * stepVolume;
   
   return NormalizeDouble(lotSize, 2);
}
