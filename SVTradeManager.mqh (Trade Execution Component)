//+------------------------------------------------------------------+
//|                                            SVTradeManager.mqh |
//|                                             Scalping Vortex EA |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, Scalping Vortex"
#property link      "https://github.com/H3NST7/ScalpingVortex"
#property version   "1.00"

#include <Trade\Trade.mqh>
#include <Trade\PositionInfo.mqh>
#include <Trade\OrderInfo.mqh>
#include <Trade\SymbolInfo.mqh>
#include <Arrays\List.mqh>
#include "SVUtils.mqh"
#include "SVPortfolio.mqh"

//+------------------------------------------------------------------+
//| CSVTradeManager - Manages all trading operations                 |
//+------------------------------------------------------------------+
class CSVTradeManager
{
private:
   // Trading components
   CTrade*           m_trade;             // Trade execution object
   CPositionInfo*    m_position;          // Position information
   COrderInfo*       m_order;             // Order information
   CSymbolInfo*      m_symbolInfo;        // Symbol information
   CSVPortfolio*     m_portfolio;         // Portfolio management
   
   // Trading parameters
   string            m_symbol;            // Trading symbol
   int               m_magicNumber;       // Magic number for order identification
   double            m_defaultLotSize;    // Default lot size
   int               m_slippage;          // Allowed slippage in points
   bool              m_useAutoLotSize;    // Use automatic lot size calculation
   double            m_riskPercent;       // Risk percentage for auto lot size
   
   // Order tracking
   CList             m_openOrders;        // List of open orders
   CList             m_pendingOrders;     // List of pending orders
   
   // Trade statistics
   int               m_totalTrades;       // Total number of trades executed
   int               m_wonTrades;         // Number of winning trades
   int               m_lostTrades;        // Number of losing trades
   double            m_grossProfit;       // Gross profit
   double            m_grossLoss;         // Gross loss
   
   // Private methods
   bool              ValidateTradeParameters(ENUM_ORDER_TYPE orderType, double volume, double price, double sl, double tp);
   double            NormalizeLotSize(double volume);
   double            CalculateAutoLotSize(double entryPrice, double stopLoss);
   
public:
                     CSVTradeManager();
                    ~CSVTradeManager();
   
   // Initialization
   bool              Initialize(string symbol, int magic, CSVPortfolio* portfolio = NULL);
   
   // Order placement
   ulong             OpenBuyOrder(double volume, double sl = 0.0, double tp = 0.0, string comment = "");
   ulong             OpenSellOrder(double volume, double sl = 0.0, double tp = 0.0, string comment = "");
   ulong             PlaceBuyLimit(double volume, double price, double sl = 0.0, double tp = 0.0, string comment = "");
   ulong             PlaceSellLimit(double volume, double price, double sl = 0.0, double tp = 0.0, string comment = "");
   ulong             PlaceBuyStop(double volume, double price, double sl = 0.0, double tp = 0.0, string comment = "");
   ulong             PlaceSellStop(double volume, double price, double sl = 0.0, double tp = 0.0, string comment = "");
   
   // Order management
   bool              ModifyPosition(ulong ticket, double sl, double tp);
   bool              ModifyOrder(ulong ticket, double price, double sl, double tp);
   bool              ClosePosition(ulong ticket, double volume = 0.0);
   bool              DeleteOrder(ulong ticket);
   bool              CloseAllPositions();
   bool              DeleteAllOrders();
   
   // Position tracking
   int               CountOpenPositions(int orderType = -1);
   double            GetTotalPositionVolume(int orderType = -1);
   bool              HasOpenPosition(string symbol, int orderType = -1);
   double            GetPositionProfit(ulong ticket);
   
   // Order tracking
   int               CountPendingOrders(int orderType = -1);
   bool              GetOrderDetails(ulong ticket, double &price, double &sl, double &tp);
   
   // Setting parameters
   void              SetDefaultLotSize(double lotSize) { m_defaultLotSize = lotSize; }
   void              SetSlippage(int slippage) { m_slippage = slippage; }
   void              EnableAutoLotSize(bool enable, double riskPercent = 2.0) 
                     { 
                        m_useAutoLotSize = enable; 
                        m_riskPercent = riskPercent; 
                     }
   
   // Statistics
   int               GetTotalTrades() const { return m_totalTrades; }
   int               GetWonTrades() const { return m_wonTrades; }
   int               GetLostTrades() const { return m_lostTrades; }
   double            GetGrossProfit() const { return m_grossProfit; }
   double            GetGrossLoss() const { return m_grossLoss; }
   double            GetNetProfit() const { return m_grossProfit - m_grossLoss; }
   double            GetProfitFactor() const { return m_grossLoss > 0 ? m_grossProfit / m_grossLoss : 0; }
   double            GetWinRate() const { return m_totalTrades > 0 ? (double)m_wonTrades / m_totalTrades * 100.0 : 0; }
   
   // Trade utility methods
   double            GetAsk() const { return m_symbolInfo.Ask(); }
   double            GetBid() const { return m_symbolInfo.Bid(); }
   double            GetSpread() const { return m_symbolInfo.Spread(); }
   double            GetTickSize() const { return m_symbolInfo.TickSize(); }
   double            GetTickValue() const { return m_symbolInfo.TickValue(); }
   double            GetPoint() const { return m_symbolInfo.Point(); }
   int               GetDigits() const { return m_symbolInfo.Digits(); }
   
   // Trade result access
   int               GetLastResultRetcode() const { return m_trade.ResultRetcode(); }
   double            GetLastResultPrice() const { return m_trade.ResultPrice(); }
   double            GetLastResultVolume() const { return m_trade.ResultVolume(); }
   ulong             GetLastResultDeal() const { return m_trade.ResultDeal(); }
   ulong             GetLastResultOrder() const { return m_trade.ResultOrder(); }
};

//+------------------------------------------------------------------+
//| Constructor                                                      |
//+------------------------------------------------------------------+
CSVTradeManager::CSVTradeManager()
{
   // Initialize trading components
   m_trade = new CTrade();
   m_position = new CPositionInfo();
   m_order = new COrderInfo();
   m_symbolInfo = new CSymbolInfo();
   m_portfolio = NULL;
   
   // Initialize trading parameters
   m_symbol = Symbol();
   m_magicNumber = 123456;
   m_defaultLotSize = 0.01;
   m_slippage = 5;
   m_useAutoLotSize = false;
   m_riskPercent = 2.0;
   
   // Initialize statistics
   m_totalTrades = 0;
   m_wonTrades = 0;
   m_lostTrades = 0;
   m_grossProfit = 0.0;
   m_grossLoss = 0.0;
}

//+------------------------------------------------------------------+
//| Destructor                                                       |
//+------------------------------------------------------------------+
CSVTradeManager::~CSVTradeManager()
{
   // Clean up dynamically allocated objects
   if(m_trade != NULL)
   {
      delete m_trade;
      m_trade = NULL;
   }
   
   if(m_position != NULL)
   {
      delete m_position;
      m_position = NULL;
   }
   
   if(m_order != NULL)
   {
      delete m_order;
      m_order = NULL;
   }
   
   if(m_symbolInfo != NULL)
   {
      delete m_symbolInfo;
      m_symbolInfo = NULL;
   }
   
   // Portfolio is externally managed so do not delete it
   m_portfolio = NULL;
}

//+------------------------------------------------------------------+
//| Initialize the trade manager                                     |
//+------------------------------------------------------------------+
bool CSVTradeManager::Initialize(string symbol, int magic, CSVPortfolio* portfolio = NULL)
{
   // Set trading parameters
   m_symbol = symbol;
   m_magicNumber = magic;
   
   // Set external portfolio if provided
   if(portfolio != NULL)
      m_portfolio = portfolio;
   
   // Initialize symbol info
   if(!m_symbolInfo.Name(symbol))
   {
      Print("Failed to set symbol name: ", symbol);
      return false;
   }
   
   // Configure trade object
   m_trade.SetExpertMagicNumber(magic);
   m_trade.SetMarginMode();
   m_trade.SetTypeFillingBySymbol(symbol);
   m_trade.SetDeviationInPoints(m_slippage);
   
   // Refresh symbol rates
   if(!m_symbolInfo.RefreshRates())
   {
      Print("Failed to refresh rates for symbol: ", symbol);
      return false;
   }
   
   return true;
}

//+------------------------------------------------------------------+
//| Open a buy position                                              |
//+------------------------------------------------------------------+
ulong CSVTradeManager::OpenBuyOrder(double volume, double sl = 0.0, double tp = 0.0, string comment = "")
{
   // If auto lot size is enabled and a stop loss is provided, calculate lot size
   if(m_useAutoLotSize && sl > 0.0)
      volume = CalculateAutoLotSize(m_symbolInfo.Ask(), sl);
   else if(volume <= 0.0)
      volume = m_defaultLotSize;
   
   // Normalize volume
   volume = NormalizeLotSize(volume);
   
   // Validate trade parameters
   if(!ValidateTradeParameters(ORDER_TYPE_BUY, volume, m_symbolInfo.Ask(), sl, tp))
      return 0;
   
   // Place buy order
   if(!m_trade.Buy(volume, m_symbol, 0.0, sl, tp, comment))
   {
      Print("Failed to open buy position. Error code: ", m_trade.ResultRetcode());
      return 0;
   }
   
   // Update statistics if order was successful
   if(m_trade.ResultDeal() != 0)
      m_totalTrades++;
   
   return m_trade.ResultOrder();
}

//+------------------------------------------------------------------+
//| Open a sell position                                             |
//+------------------------------------------------------------------+
ulong CSVTradeManager::OpenSellOrder(double volume, double sl = 0.0, double tp = 0.0, string comment = "")
{
   // If auto lot size is enabled and a stop loss is provided, calculate lot size
   if(m_useAutoLotSize && sl > 0.0)
      volume = CalculateAutoLotSize(m_symbolInfo.Bid(), sl);
   else if(volume <= 0.0)
      volume = m_defaultLotSize;
   
   // Normalize volume
   volume = NormalizeLotSize(volume);
   
   // Validate trade parameters
   if(!ValidateTradeParameters(ORDER_TYPE_SELL, volume, m_symbolInfo.Bid(), sl, tp))
      return 0;
   
   // Place sell order
   if(!m_trade.Sell(volume, m_symbol, 0.0, sl, tp, comment))
   {
      Print("Failed to open sell position. Error code: ", m_trade.ResultRetcode());
      return 0;
   }
   
   // Update statistics if order was successful
   if(m_trade.ResultDeal() != 0)
      m_totalTrades++;
   
   return m_trade.ResultOrder();
}

//+------------------------------------------------------------------+
//| Place a buy limit order                                          |
//+------------------------------------------------------------------+
ulong CSVTradeManager::PlaceBuyLimit(double volume, double price, double sl = 0.0, double tp = 0.0, string comment = "")
{
   // Use default lot size if volume is not provided
   if(volume <= 0.0)
      volume = m_defaultLotSize;
   
   // Normalize volume
   volume = NormalizeLotSize(volume);
   
   // Validate trade parameters
   if(!ValidateTradeParameters(ORDER_TYPE_BUY_LIMIT, volume, price, sl, tp))
      return 0;
   
   // Place buy limit order
   if(!m_trade.BuyLimit(volume, price, m_symbol, sl, tp, 0, 0, comment))
   {
      Print("Failed to place buy limit order. Error code: ", m_trade.ResultRetcode());
      return 0;
   }
   
   return m_trade.ResultOrder();
}

//+------------------------------------------------------------------+
//| Place a sell limit order                                         |
//+------------------------------------------------------------------+
ulong CSVTradeManager::PlaceSellLimit(double volume, double price, double sl = 0.0, double tp = 0.0, string comment = "")
{
   // Use default lot size if volume is not provided
   if(volume <= 0.0)
      volume = m_defaultLotSize;
   
   // Normalize volume
   volume = NormalizeLotSize(volume);
   
   // Validate trade parameters
   if(!ValidateTradeParameters(ORDER_TYPE_SELL_LIMIT, volume, price, sl, tp))
      return 0;
   
   // Place sell limit order
   if(!m_trade.SellLimit(volume, price, m_symbol, sl, tp, 0, 0, comment))
   {
      Print("Failed to place sell limit order. Error code: ", m_trade.ResultRetcode());
      return 0;
   }
   
   return m_trade.ResultOrder();
}

//+------------------------------------------------------------------+
//| Place a buy stop order                                           |
//+------------------------------------------------------------------+
ulong CSVTradeManager::PlaceBuyStop(double volume, double price, double sl = 0.0, double tp = 0.0, string comment = "")
{
   // Use default lot size if volume is not provided
   if(volume <= 0.0)
      volume = m_defaultLotSize;
   
   // Normalize volume
   volume = NormalizeLotSize(volume);
   
   // Validate trade parameters
   if(!ValidateTradeParameters(ORDER_TYPE_BUY_STOP, volume, price, sl, tp))
      return 0;
   
   // Place buy stop order
   if(!m_trade.BuyStop(volume, price, m_symbol, sl, tp, 0, 0, comment))
   {
      Print("Failed to place buy stop order. Error code: ", m_trade.ResultRetcode());
      return 0;
   }
   
   return m_trade.ResultOrder();
}

//+------------------------------------------------------------------+
//| Place a sell stop order                                          |
//+------------------------------------------------------------------+
ulong CSVTradeManager::PlaceSellStop(double volume, double price, double sl = 0.0, double tp = 0.0, string comment = "")
{
   // Use default lot size if volume is not provided
   if(volume <= 0.0)
      volume = m_defaultLotSize;
   
   // Normalize volume
   volume = NormalizeLotSize(volume);
   
   // Validate trade parameters
   if(!ValidateTradeParameters(ORDER_TYPE_SELL_STOP, volume, price, sl, tp))
      return 0;
   
   // Place sell stop order
   if(!m_trade.SellStop(volume, price, m_symbol, sl, tp, 0, 0, comment))
   {
      Print("Failed to place sell stop order. Error code: ", m_trade.ResultRetcode());
      return 0;
   }
   
   return m_trade.ResultOrder();
}

//+------------------------------------------------------------------+
//| Modify an existing position                                      |
//+------------------------------------------------------------------+
bool CSVTradeManager::ModifyPosition(ulong ticket, double sl, double tp)
{
   // Select the position to modify
   if(!m_position.SelectByTicket(ticket))
   {
      Print("Failed to select position with ticket: ", ticket);
      return false;
   }
   
   // Check if the position belongs to our EA
   if(m_position.Magic() != m_magicNumber)
   {
      Print("Position does not belong to this EA. Magic number: ", m_position.Magic());
      return false;
   }
   
   // Modify the position
   return m_trade.PositionModify(ticket, sl, tp);
}

//+------------------------------------------------------------------+
//| Modify an existing order                                         |
//+------------------------------------------------------------------+
bool CSVTradeManager::ModifyOrder(ulong ticket, double price, double sl, double tp)
{
   // Select the order to modify
   if(!m_order.Select(ticket))
   {
      Print("Failed to select order with ticket: ", ticket);
      return false;
   }
   
   // Check if the order belongs to our EA
   if(m_order.Magic() != m_magicNumber)
   {
      Print("Order does not belong to this EA. Magic number: ", m_order.Magic());
      return false;
   }
   
   // Modify the order
   return m_trade.OrderModify(ticket, price, sl, tp, 0, 0);
}

//+------------------------------------------------------------------+
//| Close a position                                                 |
//+------------------------------------------------------------------+
bool CSVTradeManager::ClosePosition(ulong ticket, double volume = 0.0)
{
   // Select the position to close
   if(!m_position.SelectByTicket(ticket))
   {
      Print("Failed to select position with ticket: ", ticket);
      return false;
   }
   
   // Check if the position belongs to our EA
   if(m_position.Magic() != m_magicNumber)
   {
      Print("Position does not belong to this EA. Magic number: ", m_position.Magic());
      return false;
   }
   
   // If volume is not specified or invalid, close the entire position
   if(volume <= 0.0 || volume >= m_position.Volume())
      return m_trade.PositionClose(ticket);
   
   // Partially close the position
   return m_trade.PositionClosePartial(ticket, volume);
}

//+------------------------------------------------------------------+
//| Delete a pending order                                           |
//+------------------------------------------------------------------+
bool CSVTradeManager::DeleteOrder(ulong ticket)
{
   // Select the order to delete
   if(!m_order.Select(ticket))
   {
      Print("Failed to select order with ticket: ", ticket);
      return false;
   }
   
   // Check if the order belongs to our EA
   if(m_order.Magic() != m_magicNumber)
   {
      Print("Order does not belong to this EA. Magic number: ", m_order.Magic());
      return false;
   }
   
   // Delete the order
   return m_trade.OrderDelete(ticket);
}

//+------------------------------------------------------------------+
//| Close all open positions                                         |
//+------------------------------------------------------------------+
bool CSVTradeManager::CloseAllPositions()
{
   bool result = true;
   
   // Loop through all positions
   for(int i = PositionsTotal() - 1; i >= 0; i--)
   {
      // Select position by index
      ulong ticket = PositionGetTicket(i);
      if(ticket == 0)
         continue;
      
      // Check if position belongs to our symbol and magic number
      if(PositionGetString(POSITION_SYMBOL) != m_symbol || 
         PositionGetInteger(POSITION_MAGIC) != m_magicNumber)
         continue;
      
      // Close the position
      if(!m_trade.PositionClose(ticket))
      {
         Print("Failed to close position with ticket: ", ticket, ". Error code: ", m_trade.ResultRetcode());
         result = false;
      }
   }
   
   return result;
}

//+------------------------------------------------------------------+
//| Delete all pending orders                                        |
//+------------------------------------------------------------------+
bool CSVTradeManager::DeleteAllOrders()
{
   bool result = true;
   
   // Loop through all orders
   for(int i = OrdersTotal() - 1; i >= 0; i--)
   {
      // Select order by index
      ulong ticket = OrderGetTicket(i);
      if(ticket == 0)
         continue;
      
      // Check if order belongs to our symbol and magic number
      if(OrderGetString(ORDER_SYMBOL) != m_symbol || 
         OrderGetInteger(ORDER_MAGIC) != m_magicNumber)
         continue;
      
      // Delete the order
      if(!m_trade.OrderDelete(ticket))
      {
         Print("Failed to delete order with ticket: ", ticket, ". Error code: ", m_trade.ResultRetcode());
         result = false;
      }
   }
   
   return result;
}

//+------------------------------------------------------------------+
//| Count open positions                                             |
//+------------------------------------------------------------------+
int CSVTradeManager::CountOpenPositions(int orderType = -1)
{
   int count = 0;
   
   // Loop through all positions
   for(int i = 0; i < PositionsTotal(); i++)
   {
      // Select position by index
      ulong ticket = PositionGetTicket(i);
      if(ticket == 0)
         continue;
      
      // Check if position belongs to our symbol and magic number
      if(PositionGetString(POSITION_SYMBOL) != m_symbol || 
         PositionGetInteger(POSITION_MAGIC) != m_magicNumber)
         continue;
      
      // Check position type if specified
      if(orderType >= 0 && PositionGetInteger(POSITION_TYPE) != orderType)
         continue;
      
      count++;
   }
   
   return count;
}

//+------------------------------------------------------------------+
//| Get total position volume                                        |
//+------------------------------------------------------------------+
double CSVTradeManager::GetTotalPositionVolume(int orderType = -1)
{
   double volume = 0.0;
   
   // Loop through all positions
   for(int i = 0; i < PositionsTotal(); i++)
   {
      // Select position by index
      ulong ticket = PositionGetTicket(i);
      if(ticket == 0)
         continue;
      
      // Check if position belongs to our symbol and magic number
      if(PositionGetString(POSITION_SYMBOL) != m_symbol || 
         PositionGetInteger(POSITION_MAGIC) != m_magicNumber)
         continue;
      
      // Check position type if specified
      if(orderType >= 0 && PositionGetInteger(POSITION_TYPE) != orderType)
         continue;
      
      // Add position volume
      volume += PositionGetDouble(POSITION_VOLUME);
   }
   
   return volume;
}

//+------------------------------------------------------------------+
//| Check if there is an open position for the symbol                |
//+------------------------------------------------------------------+
bool CSVTradeManager::HasOpenPosition(string symbol, int orderType = -1)
{
   // Loop through all positions
   for(int i = 0; i < PositionsTotal(); i++)
   {
      // Select position by index
      ulong ticket = PositionGetTicket(i);
      if(ticket == 0)
         continue;
      
      // Check if position belongs to the specified symbol and our magic number
      if(PositionGetString(POSITION_SYMBOL) != symbol || 
         PositionGetInteger(POSITION_MAGIC) != m_magicNumber)
         continue;
      
      // Check position type if specified
      if(orderType >= 0 && PositionGetInteger(POSITION_TYPE) != orderType)
         continue;
      
      return true;
   }
   
   return false;
}

//+------------------------------------------------------------------+
//| Get position profit                                              |
//+------------------------------------------------------------------+
double CSVTradeManager::GetPositionProfit(ulong ticket)
{
   // Select the position
   if(!m_position.SelectByTicket(ticket))
   {
      Print("Failed to select position with ticket: ", ticket);
      return 0.0;
   }
   
   return m_position.Profit();
}

//+------------------------------------------------------------------+
//| Count pending orders                                             |
//+------------------------------------------------------------------+
int CSVTradeManager::CountPendingOrders(int orderType = -1)
{
   int count = 0;
   
   // Loop through all orders
   for(int i = 0; i < OrdersTotal(); i++)
   {
      // Select order by index
      ulong ticket = OrderGetTicket(i);
      if(ticket == 0)
         continue;
      
      // Check if order belongs to our symbol and magic number
      if(OrderGetString(ORDER_SYMBOL) != m_symbol || 
         OrderGetInteger(ORDER_MAGIC) != m_magicNumber)
         continue;
      
      // Check order type if specified
      if(orderType >= 0 && OrderGetInteger(ORDER_TYPE) != orderType)
         continue;
      
      count++;
   }
   
   return count;
}

//+------------------------------------------------------------------+
//| Get order details                                                |
//+------------------------------------------------------------------+
bool CSVTradeManager::GetOrderDetails(ulong ticket, double &price, double &sl, double &tp)
{
   // Select the order
   if(!m_order.Select(ticket))
   {
      Print("Failed to select order with ticket: ", ticket);
      return false;
   }
   
   // Get order details
   price = m_order.PriceOpen();
   sl = m_order.StopLoss();
   tp = m_order.TakeProfit();
   
   return true;
}

//+------------------------------------------------------------------+
//| Validate trade parameters                                        |
//+------------------------------------------------------------------+
bool CSVTradeManager::ValidateTradeParameters(ENUM_ORDER_TYPE orderType, double volume, double price, double sl, double tp)
{
   // Refresh symbol info
   if(!m_symbolInfo.RefreshRates())
   {
      Print("Failed to refresh rates for symbol: ", m_symbol);
      return false;
   }
   
   // Check if volume is within allowed range
   double minVolume = m_symbolInfo.LotsMin();
   double maxVolume = m_symbolInfo.LotsMax();
   double stepVolume = m_symbolInfo.LotsStep();
   
   if(volume < minVolume || volume > maxVolume)
   {
      Print("Invalid volume: ", volume, ". Allowed range: ", minVolume, " - ", maxVolume);
      return false;
   }
   
   // Check if volume is a multiple of step
   if(MathAbs(volume - minVolume) / stepVolume != (int)((volume - minVolume) / stepVolume))
   {
      Print("Invalid volume: ", volume, ". Must be a multiple of step: ", stepVolume);
      return false;
   }
   
   // Get stop level in points
   int stopLevel = (int)m_symbolInfo.StopsLevel();
   double point = m_symbolInfo.Point();
   
   // Check if price is valid for the order type
   switch(orderType)
   {
      case ORDER_TYPE_BUY:
         // For buy orders, we use the ask price
         break;
         
      case ORDER_TYPE_SELL:
         // For sell orders, we use the bid price
         break;
         
      case ORDER_TYPE_BUY_LIMIT:
         // Buy limit price must be below the ask price
         if(price >= m_symbolInfo.Ask())
         {
            Print("Invalid buy limit price: ", price, ". Must be below ask price: ", m_symbolInfo.Ask());
            return false;
         }
         
         // Check if price is within the stop level
         if(m_symbolInfo.Ask() - price < stopLevel * point)
         {
            Print("Invalid buy limit price: ", price, ". Too close to current price. Minimum distance: ", stopLevel * point);
            return false;
         }
         break;
         
      case ORDER_TYPE_SELL_LIMIT:
         // Sell limit price must be above the bid price
         if(price <= m_symbolInfo.Bid())
         {
            Print("Invalid sell limit price: ", price, ". Must be above bid price: ", m_symbolInfo.Bid());
            return false;
         }
         
         // Check if price is within the stop level
         if(price - m_symbolInfo.Bid() < stopLevel * point)
         {
            Print("Invalid sell limit price: ", price, ". Too close to current price. Minimum distance: ", stopLevel * point);
            return false;
         }
         break;
         
      case ORDER_TYPE_BUY_STOP:
         // Buy stop price must be above the ask price
         if(price <= m_symbolInfo.Ask())
         {
            Print("Invalid buy stop price: ", price, ". Must be above ask price: ", m_symbolInfo.Ask());
            return false;
         }
         
         // Check if price is within the stop level
         if(price - m_symbolInfo.Ask() < stopLevel * point)
         {
            Print("Invalid buy stop price: ", price, ". Too close to current price. Minimum distance: ", stopLevel * point);
            return false;
         }
         break;
         
      case ORDER_TYPE_SELL_STOP:
         // Sell stop price must be below the bid price
         if(price >= m_symbolInfo.Bid())
         {
            Print("Invalid sell stop price: ", price, ". Must be below bid price: ", m_symbolInfo.Bid());
            return false;
         }
         
         // Check if price is within the stop level
         if(m_symbolInfo.Bid() - price < stopLevel * point)
         {
            Print("Invalid sell stop price: ", price, ". Too close to current price. Minimum distance: ", stopLevel * point);
            return false;
         }
         break;
         
      default:
         Print("Invalid order type: ", EnumToString(orderType));
         return false;
   }
   
   // Check if stop loss and take profit are valid
   if(sl > 0.0)
   {
      // Check if stop loss is valid for the order type
      switch(orderType)
      {
         case ORDER_TYPE_BUY:
         case ORDER_TYPE_BUY_STOP:
         case ORDER_TYPE_BUY_LIMIT:
            // Stop loss for buy orders must be below entry price
            if(sl >= price)
            {
               Print("Invalid stop loss: ", sl, ". Must be below entry price: ", price);
               return false;
            }
            
            // Check if stop loss is within the stop level
            if(price - sl < stopLevel * point)
            {
               Print("Invalid stop loss: ", sl, ". Too close to entry price. Minimum distance: ", stopLevel * point);
               return false;
            }
            break;
            
         case ORDER_TYPE_SELL:
         case ORDER_TYPE_SELL_STOP:
         case ORDER_TYPE_SELL_LIMIT:
            // Stop loss for sell orders must be above entry price
            if(sl <= price)
            {
               Print("Invalid stop loss: ", sl, ". Must be above entry price: ", price);
               return false;
            }
            
            // Check if stop loss is within the stop level
            if(sl - price < stopLevel * point)
            {
               Print("Invalid stop loss: ", sl, ". Too close to entry price. Minimum distance: ", stopLevel * point);
               return false;
            }
            break;
      }
   }
   
   if(tp > 0.0)
   {
      // Check if take profit is valid for the order type
      switch(orderType)
      {
         case ORDER_TYPE_BUY:
         case ORDER_TYPE_BUY_STOP:
         case ORDER_TYPE_BUY_LIMIT:
            // Take profit for buy orders must be above entry price
            if(tp <= price)
            {
               Print("Invalid take profit: ", tp, ". Must be above entry price: ", price);
               return false;
            }
            
            // Check if take profit is within the stop level
            if(tp - price < stopLevel * point)
            {
               Print("Invalid take profit: ", tp, ". Too close to entry price. Minimum distance: ", stopLevel * point);
               return false;
            }
            break;
            
         case ORDER_TYPE_SELL:
         case ORDER_TYPE_SELL_STOP:
         case ORDER_TYPE_SELL_LIMIT:
            // Take profit for sell orders must be below entry price
            if(tp >= price)
            {
               Print("Invalid take profit: ", tp, ". Must be below entry price: ", price);
               return false;
            }
            
            // Check if take profit is within the stop level
            if(price - tp < stopLevel * point)
            {
               Print("Invalid take profit: ", tp, ". Too close to entry price. Minimum distance: ", stopLevel * point);
               return false;
            }
            break;
      }
   }
   
   return true;
}

//+------------------------------------------------------------------+
//| Normalize lot size                                               |
//+------------------------------------------------------------------+
double CSVTradeManager::NormalizeLotSize(double volume)
{
   // Refresh symbol info
   if(!m_symbolInfo.RefreshRates())
      return volume;
   
   // Get lot size constraints
   double minVolume = m_symbolInfo.LotsMin();
   double maxVolume = m_symbolInfo.LotsMax();
   double stepVolume = m_symbolInfo.LotsStep();
   
   // Normalize volume
   volume = MathMax(minVolume, volume);
   volume = MathMin(maxVolume, volume);
   volume = MathRound(volume / stepVolume) * stepVolume;
   
   return NormalizeDouble(volume, 2);
}

//+------------------------------------------------------------------+
//| Calculate automatic lot size based on risk percentage            |
//+------------------------------------------------------------------+
double CSVTradeManager::CalculateAutoLotSize(double entryPrice, double stopLoss)
{
   // If portfolio is not set, use account balance
   double accountEquity = (m_portfolio != NULL) ? m_portfolio.GetAccountEquity() : AccountInfoDouble(ACCOUNT_EQUITY);
   
   // Calculate risk amount
   double riskAmount = accountEquity * m_riskPercent / 100.0;
   
   // Calculate point value
   double tickSize = m_symbolInfo.TickSize();
   double tickValue = m_symbolInfo.TickValue();
   double pointValue = tickValue / tickSize;
   
   // Calculate stop loss distance in points
   double slDistance = MathAbs(entryPrice - stopLoss) / m_symbolInfo.Point();
   
   // Calculate lot size
   double lotSize = riskAmount / (slDistance * pointValue);
   
   // Normalize lot size
   return NormalizeLotSize(lotSize);
}
