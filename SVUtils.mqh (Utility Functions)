//+------------------------------------------------------------------+
//|                                                   SVUtils.mqh |
//|                                             Scalping Vortex EA |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, Scalping Vortex"
#property link      "https://github.com/H3NST7/ScalpingVortex"
#property version   "1.00"

//+------------------------------------------------------------------+
//| Enumerations                                                     |
//+------------------------------------------------------------------+

// Log levels
enum ENUM_SV_LOG_LEVEL
{
   LOG_LEVEL_NONE    = 0,  // No logging
   LOG_LEVEL_ERROR   = 1,  // Errors only
   LOG_LEVEL_WARNING = 2,  // Errors and warnings
   LOG_LEVEL_INFO    = 3,  // Errors, warnings, and info
   LOG_LEVEL_DEBUG   = 4   // All messages (including debug)
};

// Trade types
enum ENUM_SV_TRADE_TYPE
{
   TRADE_TYPE_NONE   = 0,  // No trade
   TRADE_TYPE_BUY    = 1,  // Buy trade
   TRADE_TYPE_SELL   = 2   // Sell trade
};

// Signal strength
enum ENUM_SV_SIGNAL_STRENGTH
{
   SIGNAL_STRENGTH_NONE   = 0,  // No signal
   SIGNAL_STRENGTH_WEAK   = 1,  // Weak signal
   SIGNAL_STRENGTH_MEDIUM = 2,  // Medium signal
   SIGNAL_STRENGTH_STRONG = 3   // Strong signal
};

//+------------------------------------------------------------------+
//| CSVUtils - Utility functions for the EA                          |
//+------------------------------------------------------------------+
class CSVUtils
{
private:
   // File handling
   static string     m_logFileName;      // Log file name
   static int        m_logFileHandle;    // Log file handle
   static ENUM_SV_LOG_LEVEL m_logLevel;  // Current log level
   
   // Constants
   static const int  MAX_LOG_FILES = 10; // Maximum number of log files to keep
   
public:
   // Constructor/Destructor
   static void       Initialize(string baseName = "ScalpingVortex");
   static void       Deinitialize();
   
   // Logging methods
   static void       Log(ENUM_SV_LOG_LEVEL level, string message);
   static void       SetLogLevel(ENUM_SV_LOG_LEVEL level) { m_logLevel = level; }
   static void       CleanupLogFiles();
   
   // String formatting
   static string     FormatDouble(double value, int digits = 5);
   static string     FormatTime(datetime time);
   static string     FormatTimeSpan(datetime startTime, datetime endTime);
   
   // Price conversion
   static double     NormalizePrice(string symbol, double price);
   static double     PriceToPips(string symbol, double price1, double price2);
   static double     PipsToPrice(string symbol, double pips);
   
   // Trade utilities
   static double     NormalizeLotSize(string symbol, double lotSize);
   static string     OrderTypeToString(int orderType);
   static int        StringToOrderType(string orderTypeStr);
   
   // Date and time utilities
   static bool       IsNewDay(datetime time1, datetime time2);
   static bool       IsNewHour(datetime time1, datetime time2);
   static bool       IsWeekend(datetime time);
   static bool       IsTradingSession(datetime time, int sessionStart, int sessionEnd);
   static int        GetServerTimeHour();
   static int        GetServerUTCOffset();
   static int        GetDayOfWeek();
   
   // Error handling
   static string     GetErrorDescription(int errorCode);
   static void       HandleTradingError(int errorCode);
   
   // Math utilities
   static double     Round(double value, double ticks = 0.00001);
   static double     GetMax(double value1, double value2);
   static double     GetMin(double value1, double value2);
   static double     GetMedian(double &array[]);
   static double     GetStandardDeviation(double &array[]);
   
   // Array utilities
   static void       SortArray(double &array[]);
   static void       ArrayReverse(double &array[]);
   static double     ArraySum(double &array[]);
   static double     ArrayAverage(double &array[]);
   static double     ArrayMaximum(double &array[]);
   static double     ArrayMinimum(double &array[]);
};

// Initialize static variables
string CSVUtils::m_logFileName = "ScalpingVortex.log";
int CSVUtils::m_logFileHandle = INVALID_HANDLE;
ENUM_SV_LOG_LEVEL CSVUtils::m_logLevel = LOG_LEVEL_INFO;

//+------------------------------------------------------------------+
//| Initialize the utility class                                     |
//+------------------------------------------------------------------+
void CSVUtils::Initialize(string baseName = "ScalpingVortex")
{
   // Create log file name
   m_logFileName = baseName + "_" + TimeToString(TimeCurrent(), TIME_DATE) + ".log";
   
   // Open log file
   m_logFileHandle = FileOpen(m_logFileName, FILE_WRITE | FILE_TXT | FILE_ANSI);
   
   // Check if file was opened
   if(m_logFileHandle == INVALID_HANDLE)
   {
      Print("Failed to open log file: ", m_logFileName, ". Error code: ", GetLastError());
   }
   else
   {
      // Write header
      FileWrite(m_logFileHandle, "=== ScalpingVortex EA Log ===");
      FileWrite(m_logFileHandle, "Started at: ", TimeToString(TimeCurrent(), TIME_DATE | TIME_MINUTES | TIME_SECONDS));
      FileWrite(m_logFileHandle, "==========================");
      FileFlush(m_logFileHandle);
   }
   
   // Clean up old log files
   CleanupLogFiles();
}

//+------------------------------------------------------------------+
//| Deinitialize the utility class                                   |
//+------------------------------------------------------------------+
void CSVUtils::Deinitialize()
{
   // Close log file
   if(m_logFileHandle != INVALID_HANDLE)
   {
      // Write footer
      FileWrite(m_logFileHandle, "==========================");
      FileWrite(m_logFileHandle, "Stopped at: ", TimeToString(TimeCurrent(), TIME_DATE | TIME_MINUTES | TIME_SECONDS));
      FileWrite(m_logFileHandle, "=== Log End ===");
      
      // Close file
      FileClose(m_logFileHandle);
      m_logFileHandle = INVALID_HANDLE;
   }
}

//+------------------------------------------------------------------+
//| Log a message                                                    |
//+------------------------------------------------------------------+
void CSVUtils::Log(ENUM_SV_LOG_LEVEL level, string message)
{
   // Check if logging level is enabled
   if(level > m_logLevel)
      return;
      
   // Create log entry
   string levelText = "";
   switch(level)
   {
      case LOG_LEVEL_ERROR:
         levelText = "ERROR";
         break;
      case LOG_LEVEL_WARNING:
         levelText = "WARNING";
         break;
      case LOG_LEVEL_INFO:
         levelText = "INFO";
         break;
      case LOG_LEVEL_DEBUG:
         levelText = "DEBUG";
         break;
      default:
         levelText = "UNKNOWN";
         break;
   }
   
   // Format log entry
   string logEntry = TimeToString(TimeCurrent(), TIME_DATE | TIME_MINUTES | TIME_SECONDS) + 
                    " [" + levelText + "] " + message;
   
   // Print to terminal
   Print(logEntry);
   
   // Write to log file
   if(m_logFileHandle != INVALID_HANDLE)
   {
      FileWrite(m_logFileHandle, logEntry);
      FileFlush(m_logFileHandle);
   }
}

//+------------------------------------------------------------------+
//| Clean up old log files                                           |
//+------------------------------------------------------------------+
void CSVUtils::CleanupLogFiles()
{
   string filePath = TerminalInfoString(TERMINAL_DATA_PATH) + "\\MQL5\\Logs\\";
   string fileName = "";
   int fileHandle;
   datetime fileTime;
   datetime oldestTime = TimeCurrent();
   string oldestFile = "";
   int fileCount = 0;
   
   // Count log files and find the oldest one
   long searchHandle = FileFindFirst(filePath + "ScalpingVortex_*.log", fileName);
   
   if(searchHandle != INVALID_HANDLE)
   {
      do
      {
         fileCount++;
         
         // Get file time
         fileHandle = FileOpen(filePath + fileName, FILE_READ | FILE_SHARE_READ);
         if(fileHandle != INVALID_HANDLE)
         {
            fileTime = (datetime)FileGetInteger(fileHandle, FILE_CREATE_DATE);
            FileClose(fileHandle);
            
            // Check if older than current oldest
            if(fileTime < oldestTime)
            {
               oldestTime = fileTime;
               oldestFile = fileName;
            }
         }
         
      } while(FileFindNext(searchHandle, fileName));
      
      FileFindClose(searchHandle);
   }
   
   // If too many log files, delete the oldest one
   if(fileCount > MAX_LOG_FILES && oldestFile != "")
   {
      FileDelete(filePath + oldestFile);
      Log(LOG_LEVEL_INFO, "Deleted old log file: " + oldestFile);
   }
}

//+------------------------------------------------------------------+
//| Format a double value                                            |
//+------------------------------------------------------------------+
string CSVUtils::FormatDouble(double value, int digits = 5)
{
   return DoubleToString(value, digits);
}

//+------------------------------------------------------------------+
//| Format a time value                                              |
//+------------------------------------------------------------------+
string CSVUtils::FormatTime(datetime time)
{
   return TimeToString(time, TIME_DATE | TIME_MINUTES | TIME_SECONDS);
}

//+------------------------------------------------------------------+
//| Format a time span                                               |
//+------------------------------------------------------------------+
string CSVUtils::FormatTimeSpan(datetime startTime, datetime endTime)
{
   int totalSeconds = (int)(endTime - startTime);
   int hours = totalSeconds / 3600;
   int minutes = (totalSeconds % 3600) / 60;
   int seconds = totalSeconds % 60;
   
   return StringFormat("%02d:%02d:%02d", hours, minutes, seconds);
}

//+------------------------------------------------------------------+
//| Normalize price according to symbol settings                     |
//+------------------------------------------------------------------+
double CSVUtils::NormalizePrice(string symbol, double price)
{
   int digits = (int)SymbolInfoInteger(symbol, SYMBOL_DIGITS);
   return NormalizeDouble(price, digits);
}

//+------------------------------------------------------------------+
//| Convert price difference to pips                                 |
//+------------------------------------------------------------------+
double CSVUtils::PriceToPips(string symbol, double price1, double price2)
{
   int digits = (int)SymbolInfoInteger(symbol, SYMBOL_DIGITS);
   double point = SymbolInfoDouble(symbol, SYMBOL_POINT);
   double multiplier = (digits == 3 || digits == 5) ? 10.0 : 1.0;
   
   return MathAbs(price1 - price2) / point / multiplier;
}

//+------------------------------------------------------------------+
//| Convert pips to price difference                                 |
//+------------------------------------------------------------------+
double CSVUtils::PipsToPrice(string symbol, double pips)
{
   int digits = (int)SymbolInfoInteger(symbol, SYMBOL_DIGITS);
   double point = SymbolInfoDouble(symbol, SYMBOL_POINT);
   double multiplier = (digits == 3 || digits == 5) ? 10.0 : 1.0;
   
   return pips * point * multiplier;
}

//+------------------------------------------------------------------+
//| Normalize lot size according to symbol settings                  |
//+------------------------------------------------------------------+
double CSVUtils::NormalizeLotSize(string symbol, double lotSize)
{
   double minVolume = SymbolInfoDouble(symbol, SYMBOL_VOLUME_MIN);
   double maxVolume = SymbolInfoDouble(symbol, SYMBOL_VOLUME_MAX);
   double stepVolume = SymbolInfoDouble(symbol, SYMBOL_VOLUME_STEP);
   
   lotSize = MathMax(minVolume, lotSize);
   lotSize = MathMin(maxVolume, lotSize);
   lotSize = MathRound(lotSize / stepVolume) * stepVolume;
   
   return NormalizeDouble(lotSize, 2);
}

//+------------------------------------------------------------------+
//| Convert order type to string                                     |
//+------------------------------------------------------------------+
string CSVUtils::OrderTypeToString(int orderType)
{
   switch(orderType)
   {
      case ORDER_TYPE_BUY:
         return "Buy";
      case ORDER_TYPE_SELL:
         return "Sell";
      case ORDER_TYPE_BUY_LIMIT:
         return "Buy Limit";
      case ORDER_TYPE_SELL_LIMIT:
         return "Sell Limit";
      case ORDER_TYPE_BUY_STOP:
         return "Buy Stop";
      case ORDER_TYPE_SELL_STOP:
         return "Sell Stop";
      case ORDER_TYPE_BUY_STOP_LIMIT:
         return "Buy Stop Limit";
      case ORDER_TYPE_SELL_STOP_LIMIT:
         return "Sell Stop Limit";
      default:
         return "Unknown";
   }
}

//+------------------------------------------------------------------+
//| Convert string to order type                                     |
//+------------------------------------------------------------------+
int CSVUtils::StringToOrderType(string orderTypeStr)
{
   if(orderTypeStr == "Buy")
      return ORDER_TYPE_BUY;
   else if(orderTypeStr == "Sell")
      return ORDER_TYPE_SELL;
   else if(orderTypeStr == "Buy Limit")
      return ORDER_TYPE_BUY_LIMIT;
   else if(orderTypeStr == "Sell Limit")
      return ORDER_TYPE_SELL_LIMIT;
   else if(orderTypeStr == "Buy Stop")
      return ORDER_TYPE_BUY_STOP;
   else if(orderTypeStr == "Sell Stop")
      return ORDER_TYPE_SELL_STOP;
   else if(orderTypeStr == "Buy Stop Limit")
      return ORDER_TYPE_BUY_STOP_LIMIT;
   else if(orderTypeStr == "Sell Stop Limit")
      return ORDER_TYPE_SELL_STOP_LIMIT;
   else
      return -1;
}

//+------------------------------------------------------------------+
//| Check if it's a new day                                          |
//+------------------------------------------------------------------+
bool CSVUtils::IsNewDay(datetime time1, datetime time2)
{
   MqlDateTime dt1, dt2;
   TimeToStruct(time1, dt1);
   TimeToStruct(time2, dt2);
   
   return (dt1.day != dt2.day || dt1.mon != dt2.mon || dt1.year != dt2.year);
}

//+------------------------------------------------------------------+
//| Check if it's a new hour                                         |
//+------------------------------------------------------------------+
bool CSVUtils::IsNewHour(datetime time1, datetime time2)
{
   MqlDateTime dt1, dt2;
   TimeToStruct(time1, dt1);
   TimeToStruct(time2, dt2);
   
   return (dt1.hour != dt2.hour || IsNewDay(time1, time2));
}

//+------------------------------------------------------------------+
//| Check if it's a weekend                                          |
//+------------------------------------------------------------------+
bool CSVUtils::IsWeekend(datetime time)
{
   MqlDateTime dt;
   TimeToStruct(time, dt);
   
   // Saturday is 6, Sunday is 0
   return (dt.day_of_week == 0 || dt.day_of_week == 6);
}

//+------------------------------------------------------------------+
//| Check if current time is within trading session                  |
//+------------------------------------------------------------------+
bool CSVUtils::IsTradingSession(datetime time, int sessionStart, int sessionEnd)
{
   MqlDateTime dt;
   TimeToStruct(time, dt);
   
   int hour = dt.hour;
   
   // If session crosses midnight
   if(sessionEnd < sessionStart)
   {
      return (hour >= sessionStart || hour < sessionEnd);
   }
   else
   {
      return (hour >= sessionStart && hour < sessionEnd);
   }
}

//+------------------------------------------------------------------+
//| Get server time hour                                             |
//+------------------------------------------------------------------+
int CSVUtils::GetServerTimeHour()
{
   MqlDateTime dt;
   TimeToStruct(TimeCurrent(), dt);
   
   return dt.hour;
}

//+------------------------------------------------------------------+
//| Get server UTC offset                                            |
//+------------------------------------------------------------------+
int CSVUtils::GetServerUTCOffset()
{
   // Calculate UTC offset
   datetime serverTime = TimeCurrent();
   datetime gmtTime = TimeGMT();
   
   return (int)(serverTime - gmtTime) / 3600;
}

//+------------------------------------------------------------------+
//| Get day of week (1-7: Monday-Sunday)                             |
//+------------------------------------------------------------------+
int CSVUtils::GetDayOfWeek()
{
   MqlDateTime dt;
   TimeToStruct(TimeCurrent(), dt);
   
   // Convert to 1-7 (Monday-Sunday)
   return dt.day_of_week == 0 ? 7 : dt.day_of_week;
}

//+------------------------------------------------------------------+
//| Get error description                                            |
//+------------------------------------------------------------------+
string CSVUtils::GetErrorDescription(int errorCode)
{
   return "Error " + IntegerToString(errorCode) + ": " + ErrorDescription(errorCode);
}

//+------------------------------------------------------------------+
//| Handle trading error                                             |
//+------------------------------------------------------------------+
void CSVUtils::HandleTradingError(int errorCode)
{
   switch(errorCode)
   {
      case ERR_NO_ERROR:
         // No error
         break;
         
      case ERR_NO_RESULT:
         Log(LOG_LEVEL_WARNING, "No error returned but operation failed");
         break;
         
      case ERR_INVALID_TRADE_PARAMETERS:
      case ERR_INVALID_TRADE_VOLUME:
      case ERR_INVALID_STOPS:
         Log(LOG_LEVEL_ERROR, "Invalid trade parameters: " + GetErrorDescription(errorCode));
         break;
         
      case ERR_INVALID_PRICE:
      case ERR_PRICE_CHANGED:
      case ERR_REQUOTE:
      case ERR_OFF_QUOTES:
         Log(LOG_LEVEL_WARNING, "Price issue: " + GetErrorDescription(errorCode));
         break;
         
      case ERR_SERVER_BUSY:
      case ERR_NO_CONNECTION:
      case ERR_TRADE_TIMEOUT:
      case ERR_BROKER_BUSY:
         Log(LOG_LEVEL_WARNING, "Connection issue: " + GetErrorDescription(errorCode));
         break;
         
      case ERR_TRADE_DISABLED:
         Log(LOG_LEVEL_ERROR, "Trading is disabled");
         break;
         
      case ERR_NOT_ENOUGH_MONEY:
         Log(LOG_LEVEL_ERROR, "Not enough money to execute trade");
         break;
         
      default:
         Log(LOG_LEVEL_ERROR, "Trading error: " + GetErrorDescription(errorCode));
         break;
   }
}

//+------------------------------------------------------------------+
//| Round a value to the specified tick size                         |
//+------------------------------------------------------------------+
double CSVUtils::Round(double value, double ticks = 0.00001)
{
   return NormalizeDouble(MathRound(value / ticks) * ticks, 10);
}

//+------------------------------------------------------------------+
//| Get the maximum of two values                                    |
//+------------------------------------------------------------------+
double CSVUtils::GetMax(double value1, double value2)
{
   return MathMax(value1, value2);
}

//+------------------------------------------------------------------+
//| Get the minimum of two values                                    |
//+------------------------------------------------------------------+
double CSVUtils::GetMin(double value1, double value2)
{
   return MathMin(value1, value2);
}

//+------------------------------------------------------------------+
//| Get the median of an array                                       |
//+------------------------------------------------------------------+
double CSVUtils::GetMedian(double &array[])
{
   int size = ArraySize(array);
   
   if(size == 0)
      return 0.0;
      
   if(size == 1)
      return array[0];
      
   // Make a copy of the array
   double sortedArray[];
   ArrayCopy(sortedArray, array);
   
   // Sort the array
   ArraySort(sortedArray);
   
   // Get median
   if(size % 2 == 0)
   {
      // Even number of elements
      return (sortedArray[size / 2 - 1] + sortedArray[size / 2]) / 2.0;
   }
   else
   {
      // Odd number of elements
      return sortedArray[size / 2];
   }
}

//+------------------------------------------------------------------+
//| Get the standard deviation of an array                           |
//+------------------------------------------------------------------+
double CSVUtils::GetStandardDeviation(double &array[])
{
   int size = ArraySize(array);
   
   if(size <= 1)
      return 0.0;
      
   // Calculate mean
   double sum = 0.0;
   for(int i = 0; i < size; i++)
   {
      sum += array[i];
   }
   double mean = sum / size;
   
   // Calculate variance
   double variance = 0.0;
   for(int i = 0; i < size; i++)
   {
      variance += MathPow(array[i] - mean, 2);
   }
   variance /= (size - 1);
   
   // Return standard deviation
   return MathSqrt(variance);
}

//+------------------------------------------------------------------+
//| Sort an array                                                    |
//+------------------------------------------------------------------+
void CSVUtils::SortArray(double &array[])
{
   ArraySort(array);
}

//+------------------------------------------------------------------+
//| Reverse an array                                                 |
//+------------------------------------------------------------------+
void CSVUtils::ArrayReverse(double &array[])
{
   int size = ArraySize(array);
   
   if(size <= 1)
      return;
      
   for(int i = 0; i < size / 2; i++)
   {
      double temp = array[i];
      array[i] = array[size - 1 - i];
      array[size - 1 - i] = temp;
   }
}

//+------------------------------------------------------------------+
//| Calculate sum of array elements                                  |
//+------------------------------------------------------------------+
double CSVUtils::ArraySum(double &array[])
{
   double sum = 0.0;
   int size = ArraySize(array);
   
   for(int i = 0; i < size; i++)
   {
      sum += array[i];
   }
   
   return sum;
}

//+------------------------------------------------------------------+
//| Calculate average of array elements                              |
//+------------------------------------------------------------------+
double CSVUtils::ArrayAverage(double &array[])
{
   int size = ArraySize(array);
   
   if(size == 0)
      return 0.0;
      
   return ArraySum(array) / size;
}

//+------------------------------------------------------------------+
//| Find maximum value in array                                      |
//+------------------------------------------------------------------+
double CSVUtils::ArrayMaximum(double &array[])
{
   int size = ArraySize(array);
   
   if(size == 0)
      return 0.0;
      
   double max = array[0];
   
   for(int i = 1; i < size; i++)
   {
      if(array[i] > max)
         max = array[i];
   }
   
   return max;
}

//+------------------------------------------------------------------+
//| Find minimum value in array                                      |
//+------------------------------------------------------------------+
double CSVUtils::ArrayMinimum(double &array[])
{
   int size = ArraySize(array);
   
   if(size == 0)
      return 0.0;
      
   double min = array[0];
   
   for(int i = 1; i < size; i++)
   {
      if(array[i] < min)
         min = array[i];
   }
   
   return min;
}
