//+------------------------------------------------------------------+
//|                                               SVPortfolio.mqh |
//|                                             Scalping Vortex EA |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, Scalping Vortex"
#property link      "https://github.com/H3NST7/ScalpingVortex"
#property version   "1.00"

#include <Trade\SymbolInfo.mqh>
#include <Trade\AccountInfo.mqh>
#include <Arrays\ArrayObj.mqh>

//+------------------------------------------------------------------+
//| CSVPortfolio - Manages account equity and risk management        |
//+------------------------------------------------------------------+
class CSVPortfolio
{
private:
   // Account information
   CAccountInfo      m_accountInfo;       // Account information
   
   // Portfolio parameters
   double            m_initialBalance;    // Initial account balance
   double            m_maxDrawdown;       // Maximum allowed drawdown in percentage
   double            m_maxRiskPerTrade;   // Maximum risk per trade in percentage
   double            m_maxDailyLoss;      // Maximum daily loss in percentage
   
   // Portfolio tracking
   double            m_currentBalance;    // Current account balance
   double            m_currentEquity;     // Current account equity
   double            m_highWaterMark;     // Highest account equity
   double            m_totalProfit;       // Total profit
   double            m_totalLoss;         // Total loss
   double            m_dailyProfit;       // Daily profit
   double            m_dailyLoss;         // Daily loss
   
   // Consistency tracking
   double            m_winRate;           // Win rate percentage
   double            m_profitFactor;      // Profit factor
   double            m_averageWin;        // Average winning trade
   double            m_averageLoss;       // Average losing trade
   
   // Log historical trades
   CArrayObj         m_tradeHistory;      // Trade history
   
   // Last reset time
   datetime          m_lastDailyReset;    // Last daily stats reset time
   
   // Private methods
   void              CalculateStatistics();
   void              ResetDailyStats();
   
public:
                     CSVPortfolio();
                    ~CSVPortfolio();
   
   // Initialization and update
   bool              Initialize();
   bool              Update();
   
   // Portfolio state
   double            GetAccountBalance() const { return m_currentBalance; }
   double            GetAccountEquity() const { return m_currentEquity; }
   double            GetHighWaterMark() const { return m_highWaterMark; }
   double            GetCurrentDrawdown() const;
   double            GetCurrentDrawdownPercent() const;
   
   // Risk management
   double            GetAvailableRiskAmount() const;
   double            GetMaxPositionSize(string symbol, double entryPrice, double stopLoss) const;
   bool              IsRiskAcceptable(double riskAmount) const;
   bool              IsDailyLossLimitReached() const;
   bool              IsDrawdownLimitReached() const;
   
   // Trade tracking
   void              AddTradeResult(double profit, double commission = 0.0, double swap = 0.0);
   double            GetTotalProfit() const { return m_totalProfit; }
   double            GetTotalLoss() const { return m_totalLoss; }
   double            GetNetProfit() const { return m_totalProfit - m_totalLoss; }
   double            GetDailyProfit() const { return m_dailyProfit; }
   double            GetDailyLoss() const { return m_dailyLoss; }
   double            GetDailyNetProfit() const { return m_dailyProfit - m_dailyLoss; }
   
   // Performance metrics
   double            GetWinRate() const { return m_winRate; }
   double            GetProfitFactor() const { return m_profitFactor; }
   double            GetAverageWin() const { return m_averageWin; }
   double            GetAverageLoss() const { return m_averageLoss; }
   double            GetRiskRewardRatio() const;
   
   // Risk settings
   void              SetMaxDrawdown(double maxDrawdown) { m_maxDrawdown = maxDrawdown; }
   void              SetMaxRiskPerTrade(double maxRisk) { m_maxRiskPerTrade = maxRisk; }
   void              SetMaxDailyLoss(double maxLoss) { m_maxDailyLoss = maxLoss; }
   
   // Account information
   double            GetFreeMargin() const { return m_accountInfo.FreeMargin(); }
   double            GetMargin() const { return m_accountInfo.Margin(); }
   double            GetMarginLevel() const { return m_accountInfo.MarginLevel(); }
   ENUM_ACCOUNT_MARGIN_MODE GetMarginMode() const { return (ENUM_ACCOUNT_MARGIN_MODE)m_accountInfo.MarginMode(); }
   ENUM_ACCOUNT_TRADE_MODE GetTradeMode() const { return (ENUM_ACCOUNT_TRADE_MODE)m_accountInfo.TradeMode(); }
   string            GetCurrency() const { return m_accountInfo.Currency(); }
   double            GetLeverage() const { return m_accountInfo.Leverage(); }
};

//+------------------------------------------------------------------+
//| Constructor                                                      |
//+------------------------------------------------------------------+
CSVPortfolio::CSVPortfolio()
{
   // Initialize parameters
   m_initialBalance = 0.0;
   m_maxDrawdown = 20.0;      // 20% maximum drawdown
   m_maxRiskPerTrade = 2.0;   // 2% maximum risk per trade
   m_maxDailyLoss = 5.0;      // 5% maximum daily loss
   
   // Initialize tracking
   m_currentBalance = 0.0;
   m_currentEquity = 0.0;
   m_highWaterMark = 0.0;
   m_totalProfit = 0.0;
   m_totalLoss = 0.0;
   m_dailyProfit = 0.0;
   m_dailyLoss = 0.0;
   
   // Initialize performance metrics
   m_winRate = 0.0;
   m_profitFactor = 0.0;
   m_averageWin = 0.0;
   m_averageLoss = 0.0;
   
   // Initialize reset time
   m_lastDailyReset = 0;
}

//+------------------------------------------------------------------+
//| Destructor                                                       |
//+------------------------------------------------------------------+
CSVPortfolio::~CSVPortfolio()
{
   // Clean up trade history
   m_tradeHistory.Clear();
}

//+------------------------------------------------------------------+
//| Initialize the portfolio                                         |
//+------------------------------------------------------------------+
bool CSVPortfolio::Initialize()
{
   // Get initial account balance and equity
   m_initialBalance = m_accountInfo.Balance();
   m_currentBalance = m_initialBalance;
   m_currentEquity = m_accountInfo.Equity();
   m_highWaterMark = m_currentEquity;
   
   // Set last reset time to current day start
   MqlDateTime dt;
   TimeCurrent(dt);
   dt.hour = 0;
   dt.min = 0;
   dt.sec = 0;
   m_lastDailyReset = StructToTime(dt);
   
   return true;
}

//+------------------------------------------------------------------+
//| Update portfolio state                                           |
//+------------------------------------------------------------------+
bool CSVPortfolio::Update()
{
   // Update current balance and equity
   m_currentBalance = m_accountInfo.Balance();
   m_currentEquity = m_accountInfo.Equity();
   
   // Update high water mark if equity increased
   if(m_currentEquity > m_highWaterMark)
      m_highWaterMark = m_currentEquity;
   
   // Check if day changed and reset daily stats if needed
   MqlDateTime dt;
   TimeCurrent(dt);
   dt.hour = 0;
   dt.min = 0;
   dt.sec = 0;
   datetime currentDayStart = StructToTime(dt);
   
   if(currentDayStart > m_lastDailyReset)
   {
      ResetDailyStats();
      m_lastDailyReset = currentDayStart;
   }
   
   return true;
}

//+------------------------------------------------------------------+
//| Get current drawdown                                             |
//+------------------------------------------------------------------+
double CSVPortfolio::GetCurrentDrawdown() const
{
   return m_highWaterMark - m_currentEquity;
}

//+------------------------------------------------------------------+
//| Get current drawdown as a percentage                             |
//+------------------------------------------------------------------+
double CSVPortfolio::GetCurrentDrawdownPercent() const
{
   if(m_highWaterMark <= 0.0)
      return 0.0;
      
   return (m_highWaterMark - m_currentEquity) / m_highWaterMark * 100.0;
}

//+------------------------------------------------------------------+
//| Get available risk amount based on max risk per trade            |
//+------------------------------------------------------------------+
double CSVPortfolio::GetAvailableRiskAmount() const
{
   return m_currentEquity * m_maxRiskPerTrade / 100.0;
}

//+------------------------------------------------------------------+
//| Calculate max position size based on risk parameters             |
//+------------------------------------------------------------------+
double CSVPortfolio::GetMaxPositionSize(string symbol, double entryPrice, double stopLoss) const
{
   // If stop loss is invalid, return 0
   if(stopLoss <= 0.0 || entryPrice <= 0.0 || MathAbs(entryPrice - stopLoss) < SymbolInfoDouble(symbol, SYMBOL_POINT))
      return 0.0;
   
   // Calculate available risk amount
   double riskAmount = GetAvailableRiskAmount();
   
   // Get symbol info
   double tickSize = SymbolInfoDouble(symbol, SYMBOL_TRADE_TICK_SIZE);
   double tickValue = SymbolInfoDouble(symbol, SYMBOL_TRADE_TICK_VALUE);
   double pointValue = tickValue / tickSize;
   
   // Calculate stop loss distance in points
   double slDistance = MathAbs(entryPrice - stopLoss) / SymbolInfoDouble(symbol, SYMBOL_POINT);
   
   // Calculate lot size
   double lotSize = riskAmount / (slDistance * pointValue);
   
   // Normalize lot size
   double minVolume = SymbolInfoDouble(symbol, SYMBOL_VOLUME_MIN);
   double maxVolume = SymbolInfoDouble(symbol, SYMBOL_VOLUME_MAX);
   double stepVolume = SymbolInfoDouble(symbol, SYMBOL_VOLUME_STEP);
   
   lotSize = MathMax(minVolume, lotSize);
   lotSize = MathMin(maxVolume, lotSize);
   lotSize = MathRound(lotSize / stepVolume) * stepVolume;
   
   return NormalizeDouble(lotSize, 2);
}

//+------------------------------------------------------------------+
//| Check if risk amount is acceptable                               |
//+------------------------------------------------------------------+
bool CSVPortfolio::IsRiskAcceptable(double riskAmount) const
{
   // Check if risk exceeds max risk per trade
   double maxRisk = m_currentEquity * m_maxRiskPerTrade / 100.0;
   if(riskAmount > maxRisk)
      return false;
      
   return true;
}

//+------------------------------------------------------------------+
//| Check if daily loss limit is reached                             |
//+------------------------------------------------------------------+
bool CSVPortfolio::IsDailyLossLimitReached() const
{
   // Calculate daily loss percentage
   double dailyLossPercent = m_dailyLoss / m_initialBalance * 100.0;
   
   // Check if daily loss exceeds limit
   return (dailyLossPercent >= m_maxDailyLoss);
}

//+------------------------------------------------------------------+
//| Check if drawdown limit is reached                               |
//+------------------------------------------------------------------+
bool CSVPortfolio::IsDrawdownLimitReached() const
{
   // Check if current drawdown exceeds limit
   return (GetCurrentDrawdownPercent() >= m_maxDrawdown);
}

//+------------------------------------------------------------------+
//| Add trade result to tracking                                     |
//+------------------------------------------------------------------+
void CSVPortfolio::AddTradeResult(double profit, double commission = 0.0, double swap = 0.0)
{
   // Calculate net profit
   double netProfit = profit + commission + swap;
   
   // Update profit/loss tracking
   if(netProfit > 0.0)
   {
      m_totalProfit += netProfit;
      m_dailyProfit += netProfit;
   }
   else
   {
      m_totalLoss += MathAbs(netProfit);
      m_dailyLoss += MathAbs(netProfit);
   }
   
   // Update statistics
   CalculateStatistics();
}

//+------------------------------------------------------------------+
//| Calculate performance statistics                                 |
//+------------------------------------------------------------------+
void CSVPortfolio::CalculateStatistics()
{
   // Calculate win rate and profit factor from account history
   int totalTrades = 0;
   int winningTrades = 0;
   double grossProfit = 0.0;
   double grossLoss = 0.0;
   double totalWinAmount = 0.0;
   double totalLossAmount = 0.0;
   
   // Select all history for the current account
   if(HistorySelect(0, TimeCurrent()))
   {
      // Process all deals in the history
      int totalDeals = HistoryDealsTotal();
      
      for(int i = 0; i < totalDeals; i++)
      {
         ulong dealTicket = HistoryDealGetTicket(i);
         
         // Skip if deal is not found
         if(dealTicket == 0)
            continue;
         
         // Process only closed positions
         if(HistoryDealGetInteger(dealTicket, DEAL_ENTRY) == DEAL_ENTRY_OUT)
         {
            double dealProfit = HistoryDealGetDouble(dealTicket, DEAL_PROFIT);
            double dealCommission = HistoryDealGetDouble(dealTicket, DEAL_COMMISSION);
            double dealSwap = HistoryDealGetDouble(dealTicket, DEAL_SWAP);
            double netProfit = dealProfit + dealCommission + dealSwap;
            
            totalTrades++;
            
            if(netProfit > 0.0)
            {
               winningTrades++;
               grossProfit += netProfit;
               totalWinAmount += netProfit;
            }
            else
            {
               grossLoss += MathAbs(netProfit);
               totalLossAmount += MathAbs(netProfit);
            }
         }
      }
   }
   
   // Calculate win rate
   m_winRate = totalTrades > 0 ? (double)winningTrades / totalTrades * 100.0 : 0.0;
   
   // Calculate profit factor
   m_profitFactor = grossLoss > 0.0 ? grossProfit / grossLoss : 0.0;
   
   // Calculate average win and loss
   m_averageWin = winningTrades > 0 ? totalWinAmount / winningTrades : 0.0;
   m_averageLoss = (totalTrades - winningTrades) > 0 ? totalLossAmount / (totalTrades - winningTrades) : 0.0;
}

//+------------------------------------------------------------------+
//| Reset daily statistics                                           |
//+------------------------------------------------------------------+
void CSVPortfolio::ResetDailyStats()
{
   m_dailyProfit = 0.0;
   m_dailyLoss = 0.0;
}

//+------------------------------------------------------------------+
//| Get risk/reward ratio                                            |
//+------------------------------------------------------------------+
double CSVPortfolio::GetRiskRewardRatio() const
{
   if(m_averageLoss <= 0.0)
      return 0.0;
      
   return m_averageWin / m_averageLoss;
}
