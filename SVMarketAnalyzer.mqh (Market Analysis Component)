//+------------------------------------------------------------------+
//|                                                     SVUtils.mqh   |
//+------------------------------------------------------------------+
#property copyright "ScalpingVortex"
#property link      "https://github.com/H3NST7/ScalpingVortex"
#property version   "1.00"
#property strict

//+------------------------------------------------------------------+
//| Date and time utility functions                                  |
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//| Format date/time as a string                                     |
//+------------------------------------------------------------------+
string FormatDateTime(datetime time)
{
   string result;
   MqlDateTime dt;
   TimeToStruct(time, dt);
   
   result = StringFormat("%04d-%02d-%02d %02d:%02d:%02d",
                     dt.year,
                     dt.mon,
                     dt.day,
                     dt.hour,
                     dt.min,
                     dt.sec);
   
   return result;
}

//+------------------------------------------------------------------+
//| Format date as a string                                          |
//+------------------------------------------------------------------+
string FormatDate(datetime time)
{
   string result;
   MqlDateTime dt;
   TimeToStruct(time, dt);
   
   result = StringFormat("%04d-%02d-%02d",
                     dt.year,
                     dt.mon,
                     dt.day);
   
   return result;
}

//+------------------------------------------------------------------+
//| Format time as a string                                          |
//+------------------------------------------------------------------+
string FormatTime(datetime time)
{
   string result;
   MqlDateTime dt;
   TimeToStruct(time, dt);
   
   result = StringFormat("%02d:%02d:%02d",
                     dt.hour,
                     dt.min,
                     dt.sec);
   
   return result;
}

//+------------------------------------------------------------------+
//| Check if the current hour is within trading hours                |
//+------------------------------------------------------------------+
bool IsTradingHour()
{
   MqlDateTime dt;
   TimeToStruct(TimeCurrent(), dt);
   int hour = dt.hour;
   
   // Define trading hours (adjust as needed)
   return (hour >= 8 && hour < 20);
}

//+------------------------------------------------------------------+
//| Calculate minutes since the start of the day                     |
//+------------------------------------------------------------------+
int MinutesSinceDayStart(datetime time)
{
   MqlDateTime dt;
   TimeToStruct(time, dt);
   return dt.hour * 60 + dt.min;
}

//+------------------------------------------------------------------+
//| Check if today is a weekend                                      |
//+------------------------------------------------------------------+
bool IsWeekend()
{
   MqlDateTime dt;
   TimeToStruct(TimeCurrent(), dt);
   int day = dt.day_of_week;
   return (day == 0 || day == 6); // 0 = Sunday, 6 = Saturday
}

//+------------------------------------------------------------------+
//| Check if the market is open                                      |
//+------------------------------------------------------------------+
bool IsMarketOpen(string symbol = NULL)
{
   if(symbol == NULL)
      symbol = Symbol();
      
   return !IsTradeSessionClosed(); // MT4 built-in function
}

//+------------------------------------------------------------------+
//| Error handling utility functions                                 |
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//| Get the error description based on error code                    |
//+------------------------------------------------------------------+
string GetErrorDescription(int errorCode)
{
   string errorDescription = "Unknown error";
   
   switch(errorCode)
   {
      case 0:   errorDescription = "No error"; break;
      case 1:   errorDescription = "No error, but the result is unknown"; break;
      case 2:   errorDescription = "Common error"; break;
      case 3:   errorDescription = "Invalid trade parameters"; break;
      case 4:   errorDescription = "Trade server is busy"; break;
      case 5:   errorDescription = "Old version of the client terminal"; break;
      case 6:   errorDescription = "No connection with trade server"; break;
      case 7:   errorDescription = "Not enough rights"; break;
      case 8:   errorDescription = "Too frequent requests"; break;
      case 9:   errorDescription = "Malfunctional trade operation"; break;
      case 64:  errorDescription = "Account disabled"; break;
      case 65:  errorDescription = "Invalid account"; break;
      case 128: errorDescription = "Trade timeout"; break;
      case 129: errorDescription = "Invalid price"; break;
      case 130: errorDescription = "Invalid stops"; break;
      case 131: errorDescription = "Invalid trade volume"; break;
      case 132: errorDescription = "Market is closed"; break;
      case 133: errorDescription = "Trade is disabled"; break;
      case 134: errorDescription = "Not enough money"; break;
      case 135: errorDescription = "Price changed"; break;
      case 136: errorDescription = "Off quotes"; break;
      case 137: errorDescription = "Broker is busy"; break;
      case 138: errorDescription = "Requote"; break;
      case 139: errorDescription = "Order is locked"; break;
      case 140: errorDescription = "Long positions only allowed"; break;
      case 141: errorDescription = "Too many requests"; break;
      case 145: errorDescription = "Modification denied because order too close to market"; break;
      case 146: errorDescription = "Trade context is busy"; break;
      case 147: errorDescription = "Expirations are denied by broker"; break;
      case 148: errorDescription = "Amount of open and pending orders has reached the limit"; break;
      case 149: errorDescription = "An attempt to open an order countervailing to existing one"; break;
      case 150: errorDescription = "Hedge is prohibited"; break;
      case 4000: errorDescription = "No error"; break;
      case 4001: errorDescription = "Wrong function pointer"; break;
      case 4002: errorDescription = "Array index is out of range"; break;
      case 4003: errorDescription = "No memory for function call stack"; break;
      case 4004: errorDescription = "Recursive stack overflow"; break;
      case 4005: errorDescription = "Not enough stack for parameter"; break;
      case 4006: errorDescription = "No memory for parameter string"; break;
      case 4007: errorDescription = "No memory for temp string"; break;
      case 4008: errorDescription = "Not initialized string"; break;
      case 4009: errorDescription = "Not initialized string in array"; break;
      case 4010: errorDescription = "No memory for array string"; break;
      case 4011: errorDescription = "Too long string"; break;
      case 4012: errorDescription = "Remainder from zero divide"; break;
      case 4013: errorDescription = "Zero divide"; break;
      case 4014: errorDescription = "Unknown command"; break;
      case 4015: errorDescription = "Wrong jump"; break;
      case 4016: errorDescription = "Not initialized array"; break;
      case 4017: errorDescription = "DLL calls are not allowed"; break;
      case 4018: errorDescription = "Cannot load library"; break;
      case 4019: errorDescription = "Cannot call function"; break;
      case 4020: errorDescription = "Expert function calls are not allowed"; break;
      case 4021: errorDescription = "Not enough memory for string returned from function"; break;
      case 4022: errorDescription = "System is busy"; break;
      case 4050: errorDescription = "Invalid function parameters count"; break;
      case 4051: errorDescription = "Invalid function parameter value"; break;
      case 4052: errorDescription = "String function internal error"; break;
      case 4053: errorDescription = "Some array error"; break;
      case 4054: errorDescription = "Incorrect series array using"; break;
      case 4055: errorDescription = "Custom indicator error"; break;
      case 4056: errorDescription = "Arrays are incompatible"; break;
      case 4057: errorDescription = "Global variables processing error"; break;
      case 4058: errorDescription = "Global variable not found"; break;
      case 4059: errorDescription = "Function is not allowed in testing mode"; break;
      case 4060: errorDescription = "Function is not confirmed"; break;
      case 4061: errorDescription = "Send mail error"; break;
      case 4062: errorDescription = "String parameter expected"; break;
      case 4063: errorDescription = "Integer parameter expected"; break;
      case 4064: errorDescription = "Double parameter expected"; break;
      case 4065: errorDescription = "Array as parameter expected"; break;
      case 4066: errorDescription = "Requested history data in update state"; break;
      case 4067: errorDescription = "Some error in trading function"; break;
      case 4099: errorDescription = "End of file"; break;
      case 4100: errorDescription = "Some file error"; break;
      case 4101: errorDescription = "Wrong file name"; break;
      case 4102: errorDescription = "Too many opened files"; break;
      case 4103: errorDescription = "Cannot open file"; break;
      case 4104: errorDescription = "Incompatible access to a file"; break;
      case 4105: errorDescription = "No order selected"; break;
      case 4106: errorDescription = "Unknown symbol"; break;
      case 4107: errorDescription = "Invalid price parameter for trade function"; break;
      case 4108: errorDescription = "Invalid ticket"; break;
      case 4109: errorDescription = "Trade is not allowed in the expert properties"; break;
      case 4110: errorDescription = "Longs are not allowed in the expert properties"; break;
      case 4111: errorDescription = "Shorts are not allowed in the expert properties"; break;
      case 4200: errorDescription = "Object already exists"; break;
      case 4201: errorDescription = "Unknown object property"; break;
      case 4202: errorDescription = "Object does not exist"; break;
      case 4203: errorDescription = "Unknown object type"; break;
      case 4204: errorDescription = "No object name"; break;
      case 4205: errorDescription = "Object coordinates error"; break;
      case 4206: errorDescription = "No specified subwindow"; break;
      case 4207: errorDescription = "Some error in object function"; break;
      default:  errorDescription = "Error " + IntegerToString(errorCode); break;
   }
   
   return errorDescription;
}

//+------------------------------------------------------------------+
//| Print an error message with details                              |
//+------------------------------------------------------------------+
void PrintError(string message, int errorCode)
{
   string errorDescription = GetErrorDescription(errorCode);
   Print(message, " Error: ", errorCode, " (", errorDescription, ")");
}

//+------------------------------------------------------------------+
//| Fixed time function implementations to replace deprecated ones    |
//+------------------------------------------------------------------+

// Modern MT4/MT5 compatible time functions
int TimeYear(datetime time)
{
   MqlDateTime dt;
   TimeToStruct(time, dt);
   return dt.year;
}

int TimeMonth(datetime time)
{
   MqlDateTime dt;
   TimeToStruct(time, dt);
   return dt.mon;
}

int TimeDay(datetime time)
{
   MqlDateTime dt;
   TimeToStruct(time, dt);
   return dt.day;
}

int TimeHour(datetime time)
{
   MqlDateTime dt;
   TimeToStruct(time, dt);
   return dt.hour;
}

int TimeMinute(datetime time)
{
   MqlDateTime dt;
   TimeToStruct(time, dt);
   return dt.min;
}

int TimeSeconds(datetime time)
{
   MqlDateTime dt;
   TimeToStruct(time, dt);
   return dt.sec;
}

int TimeDayOfWeek(datetime time)
{
   MqlDateTime dt;
   TimeToStruct(time, dt);
   return dt.day_of_week;
}

//+------------------------------------------------------------------+
//| String utilities                                                 |
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//| Join array elements into a string with separator                 |
//+------------------------------------------------------------------+
string JoinStrings(string &array[], string separator)
{
   string result = "";
   int size = ArraySize(array);
   
   for(int i = 0; i < size; i++)
   {
      if(i > 0)
         result += separator;
      
      result += array[i];
   }
   
   return result;
}

//+------------------------------------------------------------------+
//| Split a string into an array using a separator                   |
//+------------------------------------------------------------------+
int SplitString(string str, string separator, string &array[])
{
   int count = 0;
   int pos = 0;
   int sepLen = StringLen(separator);
   int len = StringLen(str);
   
   // Count the number of separators
   while((pos = StringFind(str, separator, pos)) != -1)
   {
      count++;
      pos += sepLen;
   }
   
   // Resize the array to accommodate the parts
   ArrayResize(array, count + 1);
   
   // Split the string
   pos = 0;
   int prevPos = 0;
   int idx = 0;
   
   while((pos = StringFind(str, separator, prevPos)) != -1)
   {
      array[idx++] = StringSubstr(str, prevPos, pos - prevPos);
      prevPos = pos + sepLen;
   }
   
   // Add the last part
   array[idx] = StringSubstr(str, prevPos, len - prevPos);
   
   return count + 1;
}

//+------------------------------------------------------------------+
//| Mathematical utilities                                           |
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//| Round to the nearest specified precision                         |
//+------------------------------------------------------------------+
double RoundToDigits(double value, int digits)
{
   double factor = MathPow(10.0, digits);
   return MathRound(value * factor) / factor;
}

//+------------------------------------------------------------------+
//| Normalize price value based on symbol digits                     |
//+------------------------------------------------------------------+
double NormalizePrice(string symbol, double price)
{
   int digits = (int)MarketInfo(symbol, MODE_DIGITS);
   return NormalizeDouble(price, digits);
}

//+------------------------------------------------------------------+
//| Convert lot size to contract size                                |
//+------------------------------------------------------------------+
double LotsToContractSize(string symbol, double lots)
{
   double contractSize = MarketInfo(symbol, MODE_LOTSIZE);
   return lots * contractSize;
}

//+------------------------------------------------------------------+
//| Calculate position value                                         |
//+------------------------------------------------------------------+
double CalculatePositionValue(string symbol, double lots, double price)
{
   double contractSize = MarketInfo(symbol, MODE_LOTSIZE);
   double tickValue = MarketInfo(symbol, MODE_TICKVALUE);
   double tickSize = MarketInfo(symbol, MODE_TICKSIZE);
   
   return lots * contractSize * price * (tickValue / tickSize);
}
