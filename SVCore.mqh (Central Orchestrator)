//+------------------------------------------------------------------+
//|                                                     SVCore.mqh |
//|                                             Scalping Vortex EA |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, Scalping Vortex"
#property link      "https://github.com/H3NST7/ScalpingVortex"
#property version   "1.00"

#include <Trade\Trade.mqh>
#include <Trade\PositionInfo.mqh>
#include <Trade\OrderInfo.mqh>
#include <Trade\SymbolInfo.mqh>
#include <Trade\AccountInfo.mqh>

// Forward declarations
class CSVMarketAnalyzer;
class CSVTradeManager;
class CSVRiskEngine;
class CSVPortfolio;
class CSVOptimizer;

//+------------------------------------------------------------------+
//| CSVCore class - Main core management class for the EA            |
//+------------------------------------------------------------------+
class CSVCore
{
private:
   // System components
   CSymbolInfo        m_symbolInfo;       // Symbol information
   CAccountInfo       m_accountInfo;      // Account information
   
   // Main components
   CSVMarketAnalyzer* m_marketAnalyzer;   // Market analysis component
   CSVTradeManager*   m_tradeManager;     // Trade execution component
   CSVRiskEngine*     m_riskEngine;       // Risk management component
   CSVPortfolio*      m_portfolio;        // Portfolio management component
   CSVOptimizer*      m_optimizer;        // Strategy optimization component
   
   // System state
   bool               m_isInitialized;    // Flag indicating if the EA is initialized
   bool               m_isTesting;        // Flag indicating if running in strategy tester
   bool               m_isTradingEnabled; // Flag indicating if trading is enabled
   bool               m_isDebugMode;      // Flag indicating if debug mode is enabled
   
   // Configuration
   string             m_symbolName;       // Symbol to trade
   ENUM_TIMEFRAMES    m_timeframe;        // Timeframe to analyze
   int                m_magicNumber;      // Magic number for order identification
   int                m_maxConcurrentTrades; // Maximum number of concurrent trades
   bool               m_allowLongs;       // Flag indicating if long trades are allowed
   bool               m_allowShorts;      // Flag indicating if short trades are allowed
   double             m_minVolatilityATR; // Minimum volatility required to trade
   
   // State tracking
   datetime           m_startTime;        // Time when EA was started
   int                m_lastError;        // Last error code
   string             m_lastErrorDesc;    // Last error description
   
   // Private utility methods
   void               InitializeComponents();
   void               UpdateSystem();
   void               CheckTradingConditions();
   void               GenerateSignals();
   void               ExecuteSignal();
   
   // Error handling
   string             GetErrorDescription(int errorCode);
   void               SetLastError(int errorCode, string description);
   
   // Formatting helpers
   string             FormatDouble(double value, int digits);
   string             FormatTime(datetime time);

public:
                      CSVCore();          // Constructor
                     ~CSVCore();          // Destructor
   
   // Core initialization and execution
   bool               Initialize(string symbol, ENUM_TIMEFRAMES tf, int magic);
   bool               ProcessTick();
   bool               ProcessTimer();
   
   // Getters
   bool               IsInitialized() const { return m_isInitialized; }
   bool               IsTradingEnabled() const { return m_isTradingEnabled; }
   string             GetSymbol() const { return m_symbolName; }
   ENUM_TIMEFRAMES    GetTimeframe() const { return m_timeframe; }
   int                GetMagicNumber() const { return m_magicNumber; }
   
   // Configuration methods
   void               SetMaxConcurrentTrades(int maxTrades) { m_maxConcurrentTrades = maxTrades; }
   void               SetDirectionalBias(bool allowLongs, bool allowShorts) 
                     { 
                        m_allowLongs = allowLongs; 
                        m_allowShorts = allowShorts; 
                     }
   void               SetMinimumVolatility(double minVolatilityATR) { m_minVolatilityATR = minVolatilityATR; }
   
   // Trade control
   void               EnableTrading() { m_isTradingEnabled = true; }
   void               DisableTrading() { m_isTradingEnabled = false; }
   
   // Component access
   CSVMarketAnalyzer* GetMarketAnalyzer() const { return m_marketAnalyzer; }
   CSVTradeManager*   GetTradeManager() const { return m_tradeManager; }
   CSVPortfolio*      GetPortfolio() const { return m_portfolio; }
   CSVRiskEngine*     GetRiskEngine() const { return m_riskEngine; }
   CSVOptimizer*      GetOptimizer() const { return m_optimizer; }
   
   // System utility methods
   int                GetLastError() const { return m_lastError; }
   string             GetLastErrorDescription() const { return m_lastErrorDesc; }
   datetime           GetStartTime() const { return m_startTime; }
   bool               GetIsTesting() const { return m_isTesting; }
};

//+------------------------------------------------------------------+
//| Constructor                                                      |
//+------------------------------------------------------------------+
CSVCore::CSVCore()
{
   m_isInitialized = false;
   m_isTradingEnabled = false;
   m_isDebugMode = false;
   m_isTesting = MQLInfoInteger(MQL_TESTER);
   m_startTime = TimeCurrent();
   m_lastError = 0;
   m_lastErrorDesc = "";
   
   m_symbolName = Symbol();
   m_timeframe = Period();
   m_magicNumber = 123456;
   m_maxConcurrentTrades = 3;
   m_allowLongs = true;
   m_allowShorts = true;
   m_minVolatilityATR = 0.0;
   
   m_marketAnalyzer = NULL;
   m_portfolio = NULL;
   m_tradeManager = NULL;
   m_riskEngine = NULL;
   m_optimizer = NULL;
}

//+------------------------------------------------------------------+
//| Destructor                                                       |
//+------------------------------------------------------------------+
CSVCore::~CSVCore()
{
   // Clean up allocated components
   if(m_marketAnalyzer != NULL) { delete m_marketAnalyzer; m_marketAnalyzer = NULL; }
   if(m_portfolio != NULL) { delete m_portfolio; m_portfolio = NULL; }
   if(m_tradeManager != NULL) { delete m_tradeManager; m_tradeManager = NULL; }
   if(m_riskEngine != NULL) { delete m_riskEngine; m_riskEngine = NULL; }
   if(m_optimizer != NULL) { delete m_optimizer; m_optimizer = NULL; }
}

//+------------------------------------------------------------------+
//| Initialize the EA                                                |
//+------------------------------------------------------------------+
bool CSVCore::Initialize(string symbol, ENUM_TIMEFRAMES tf, int magic)
{
   // Store basic parameters
   m_symbolName = symbol;
   m_timeframe = tf;
   m_magicNumber = magic;
   
   // Initialize the symbol info
   if(!m_symbolInfo.Name(symbol))
   {
      SetLastError(ERR_MARKET_UNKNOWN_SYMBOL, "Failed to set symbol name: " + symbol);
      return false;
   }
   
   // Refresh rates for accurate pricing
   if(!m_symbolInfo.RefreshRates())
   {
      SetLastError(ERR_UNKNOWN_SYMBOL, "Failed to refresh rates for symbol: " + symbol);
      return false;
   }
   
   // Initialize components
   InitializeComponents();
   
   // Set initialization flag
   m_isInitialized = true;
   
   return true;
}

//+------------------------------------------------------------------+
//| Initialize system components                                     |
//+------------------------------------------------------------------+
void CSVCore::InitializeComponents()
{
   // Create and initialize components
   m_portfolio = new CSVPortfolio();
   m_marketAnalyzer = new CSVMarketAnalyzer();
   m_tradeManager = new CSVTradeManager();
   m_riskEngine = new CSVRiskEngine();
   m_optimizer = new CSVOptimizer();
   
   // Additional initialization logic will be implemented in these classes
}

//+------------------------------------------------------------------+
//| Process a new tick                                               |
//+------------------------------------------------------------------+
bool CSVCore::ProcessTick()
{
   if(!m_isInitialized)
   {
      SetLastError(ERR_NOT_INITIALIZED, "EA is not initialized");
      return false;
   }
   
   // Update system state
   UpdateSystem();
   
   // Check trading conditions
   if(m_isTradingEnabled)
   {
      CheckTradingConditions();
      GenerateSignals();
      ExecuteSignal();
   }
   
   return true;
}

//+------------------------------------------------------------------+
//| Update system state                                              |
//+------------------------------------------------------------------+
void CSVCore::UpdateSystem()
{
   // Refresh rates
   m_symbolInfo.RefreshRates();
   
   // Update system components
   // Additional logic will be implemented in component classes
}

//+------------------------------------------------------------------+
//| Check trading conditions                                         |
//+------------------------------------------------------------------+
void CSVCore::CheckTradingConditions()
{
   // Check if trading is allowed
   if(!m_accountInfo.TradeAllowed())
   {
      DisableTrading();
      SetLastError(ERR_TRADE_NOT_ALLOWED, "Trading is not allowed");
      return;
   }
   
   // Check market volatility
   // Logic will be implemented in MarketAnalyzer class
}

//+------------------------------------------------------------------+
//| Generate trading signals                                         |
//+------------------------------------------------------------------+
void CSVCore::GenerateSignals()
{
   // Generate trading signals based on market analysis
   // Logic will be implemented in MarketAnalyzer class
}

//+------------------------------------------------------------------+
//| Execute trading signals                                          |
//+------------------------------------------------------------------+
void CSVCore::ExecuteSignal()
{
   // Execute trading signals
   // Logic will be implemented in TradeManager class
}

//+------------------------------------------------------------------+
//| Process timer event                                              |
//+------------------------------------------------------------------+
bool CSVCore::ProcessTimer()
{
   if(!m_isInitialized)
   {
      SetLastError(ERR_NOT_INITIALIZED, "EA is not initialized");
      return false;
   }
   
   // Additional timer-based logic
   
   return true;
}

//+------------------------------------------------------------------+
//| Set last error                                                   |
//+------------------------------------------------------------------+
void CSVCore::SetLastError(int errorCode, string description)
{
   m_lastError = errorCode;
   m_lastErrorDesc = description;
   
   if(m_isDebugMode)
      Print("ERROR ", errorCode, ": ", description);
}

//+------------------------------------------------------------------+
//| Get error description                                            |
//+------------------------------------------------------------------+
string CSVCore::GetErrorDescription(int errorCode)
{
   return "Error " + IntegerToString(errorCode) + ": " + ErrorDescription(errorCode);
}

//+------------------------------------------------------------------+
//| Format double value                                              |
//+------------------------------------------------------------------+
string CSVCore::FormatDouble(double value, int digits)
{
   return DoubleToString(value, digits);
}

//+------------------------------------------------------------------+
//| Format time value                                                |
//+------------------------------------------------------------------+
string CSVCore::FormatTime(datetime time)
{
   return TimeToString(time, TIME_DATE | TIME_MINUTES | TIME_SECONDS);
}
